[{"C:\\Users\\moonl\\apr\\src\\index.js":"1","C:\\Users\\moonl\\apr\\src\\App.js":"2","C:\\Users\\moonl\\apr\\src\\reportWebVitals.js":"3","C:\\Users\\moonl\\apr\\src\\components\\Body.jsx":"4","C:\\Users\\moonl\\apr\\src\\components\\Tabs.jsx":"5","C:\\Users\\moonl\\apr\\src\\components\\DropDownMenu.jsx":"6","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\EnglishLanguageLevels\\EnglishLanguageLevels.jsx":"7","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\EntryForTheAYsF\\EntryForTheAYs.jsx":"8","C:\\Users\\moonl\\apr\\src\\components\\AboveTableText.jsx":"9","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\EntryForTheAYsF\\EntryTableUI.jsx":"10","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\EnglishLanguageLevels\\EnglishTableUI.jsx":"11","C:\\Users\\moonl\\apr\\src\\components\\Header\\HeaderTest.jsx":"12","C:\\Users\\moonl\\apr\\src\\components\\Header\\Header.jsx":"13","C:\\Users\\moonl\\apr\\src\\components\\Header\\AppBarCollapse.js":"14","C:\\Users\\moonl\\apr\\src\\components\\Header\\ButtonAppBarCollapse.js":"15","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\StaffStudentComMeetings\\StaffStudentComMeetings.jsx":"16","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\ReuseableTable.jsx":"17","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\ProgramFeedback\\ProgramFeedback.jsx":"18","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\TeachingStaff\\TeachingStaff.jsx":"19","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\LSBULinkTutorReports\\LSBULinkTutorReports.jsx":"20","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\ReviewOfAssessments\\ReviewOfAssessments.jsx":"21","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\ExternalExaminerReport\\ExternalExaminerReport.jsx":"22","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\ModuleSpecifications\\ModuleSpecifications.jsx":"23","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\StaffBreakDownForTheCurrentAY\\StaffBreakDownForTheCurrentAY.jsx":"24","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\StaffBreakDownForTheCurrentAY\\StaffBreakDownTableUI.jsx":"25","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\StudentProfileAndMarketing\\StudentProfileAndMarketing.jsx":"26","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\StudentProfileAndMarketing\\StudentProfileTableUI.jsx":"27","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\SupportingDocumentation\\SupportingDocumentation.jsx":"28","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\SupportingDocumentation\\SupDocTableUI.jsx":"29","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\ProgramBoardDecisions\\PBDMain.jsx":"30","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\ProgramBoardDecisions\\PBDTables\\CoreModulesTable.jsx":"31","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\ProgramBoardDecisions\\PBDTables\\SummaryProbationPeriod.jsx":"32","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\ProgramBoardDecisions\\PBDTables\\ProgressionThesisProposal.jsx":"33","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\ProgramBoardDecisions\\PBDTables\\VoluntaryWithdrawls.jsx":"34","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\ProgramBoardDecisions\\PBDTables\\ExpectedToGraduate.jsx":"35","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\ProgramBoardDecisions\\PBDTables\\DegreeAwarded.jsx":"36","C:\\Users\\moonl\\apr\\src\\components\\Footer.jsx":"37","C:\\Users\\moonl\\apr\\src\\components\\Drawer.jsx":"38"},{"size":298,"mtime":1607252242154,"results":"39","hashOfConfig":"40"},{"size":550,"mtime":1608207602104,"results":"41","hashOfConfig":"40"},{"size":362,"mtime":499162500000,"results":"42","hashOfConfig":"40"},{"size":3237,"mtime":1608207555860,"results":"43","hashOfConfig":"40"},{"size":5400,"mtime":1607587913546,"results":"44","hashOfConfig":"40"},{"size":638,"mtime":1607936917951,"results":"45","hashOfConfig":"40"},{"size":1087,"mtime":1607334442823,"results":"46","hashOfConfig":"40"},{"size":1038,"mtime":1607520944863,"results":"47","hashOfConfig":"40"},{"size":515,"mtime":1607864455942,"results":"48","hashOfConfig":"40"},{"size":10097,"mtime":1608122450902,"results":"49","hashOfConfig":"40"},{"size":7353,"mtime":1607935919807,"results":"50","hashOfConfig":"40"},{"size":2026,"mtime":1608206481896,"results":"51","hashOfConfig":"40"},{"size":6240,"mtime":1607337340455,"results":"52","hashOfConfig":"40"},{"size":1333,"mtime":1608194779233,"results":"53","hashOfConfig":"40"},{"size":1559,"mtime":1607338887319,"results":"54","hashOfConfig":"40"},{"size":782,"mtime":1607425606976,"results":"55","hashOfConfig":"40"},{"size":6186,"mtime":1608022876895,"results":"56","hashOfConfig":"40"},{"size":1081,"mtime":1607426353465,"results":"57","hashOfConfig":"40"},{"size":820,"mtime":1607426387951,"results":"58","hashOfConfig":"40"},{"size":864,"mtime":1607426669490,"results":"59","hashOfConfig":"40"},{"size":904,"mtime":1607428038366,"results":"60","hashOfConfig":"40"},{"size":596,"mtime":1607430142914,"results":"61","hashOfConfig":"40"},{"size":842,"mtime":1607430339387,"results":"62","hashOfConfig":"40"},{"size":710,"mtime":1607864386541,"results":"63","hashOfConfig":"40"},{"size":5824,"mtime":1607936810274,"results":"64","hashOfConfig":"40"},{"size":600,"mtime":1607503794846,"results":"65","hashOfConfig":"40"},{"size":5344,"mtime":1607936823156,"results":"66","hashOfConfig":"40"},{"size":971,"mtime":1607506085229,"results":"67","hashOfConfig":"40"},{"size":5597,"mtime":1607936864949,"results":"68","hashOfConfig":"40"},{"size":3546,"mtime":1607859780683,"results":"69","hashOfConfig":"40"},{"size":9690,"mtime":1608035128885,"results":"70","hashOfConfig":"40"},{"size":8468,"mtime":1608035295337,"results":"71","hashOfConfig":"40"},{"size":7129,"mtime":1608035281231,"results":"72","hashOfConfig":"40"},{"size":5695,"mtime":1608035315583,"results":"73","hashOfConfig":"40"},{"size":5511,"mtime":1608035259398,"results":"74","hashOfConfig":"40"},{"size":5337,"mtime":1608035246907,"results":"75","hashOfConfig":"40"},{"size":2334,"mtime":1607862234904,"results":"76","hashOfConfig":"40"},{"size":10170,"mtime":1608206446853,"results":"77","hashOfConfig":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"1carsaz",{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"80"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"80"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"80"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"80"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"80"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"80"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"80"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"80"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\moonl\\apr\\src\\index.js",[],["164","165"],"C:\\Users\\moonl\\apr\\src\\App.js",[],"C:\\Users\\moonl\\apr\\src\\reportWebVitals.js",[],"C:\\Users\\moonl\\apr\\src\\components\\Body.jsx",["166"],"C:\\Users\\moonl\\apr\\src\\components\\Tabs.jsx",[],"C:\\Users\\moonl\\apr\\src\\components\\DropDownMenu.jsx",[],"C:\\Users\\moonl\\apr\\src\\components\\Tabels\\EnglishLanguageLevels\\EnglishLanguageLevels.jsx",[],"C:\\Users\\moonl\\apr\\src\\components\\Tabels\\EntryForTheAYsF\\EntryForTheAYs.jsx",[],"C:\\Users\\moonl\\apr\\src\\components\\AboveTableText.jsx",[],"C:\\Users\\moonl\\apr\\src\\components\\Tabels\\EntryForTheAYsF\\EntryTableUI.jsx",["167"],"import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n// Icons\r\nimport EditIcon from \"@material-ui/icons/EditOutlined\";\r\nimport DoneIcon from \"@material-ui/icons/DoneAllTwoTone\";\r\nimport RevertIcon from \"@material-ui/icons/NotInterestedOutlined\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    marginTop: theme.spacing(3),\r\n    overflowX: \"auto\",\r\n  },\r\n  table: {\r\n    minWidth: 650,\r\n    borderCollapse: \"separate\",\r\n  },\r\n  selectTableCell: {\r\n    width: 60,\r\n  },\r\n  tableCell: {\r\n    maxWidth: \"30vw\",\r\n    height: 40,\r\n    textAlign: \"center\",\r\n    fontSize: \"25px\",\r\n    \"&:hover\": {\r\n      color: \"black\",\r\n      backgroundColor: \"rgb(0, 0, 0, 0.1)\",\r\n    },\r\n  },\r\n  input: {\r\n    width: 130,\r\n    height: 40,\r\n  },\r\n  tableHeaderText: {\r\n    color: \"white\",\r\n    textAlign: \"center\",\r\n    borderBottom: \"none\",\r\n    fontSize: \"1.1em\",\r\n    border: \"1px solid white\",\r\n  },\r\n  tableHeaderEmpty: {\r\n    color: \"white\",\r\n    textAlign: \"center\",\r\n    borderBottom: \"none\",\r\n    fontSize: \"1.1em\",\r\n    borderRight: \"1px solid white\",\r\n    borderLeft: \"1px solid white\",\r\n  },\r\n}));\r\n\r\n// const createData = (\r\n//   batch,\r\n//   yearofEntry,\r\n//   bScCertificate,\r\n//   totalNewStudentsPerSemester,\r\n//   totalNewStudentsPerYear\r\n// ) => ({\r\n//   id: batch.replace(\" \", \"_\"),\r\n//   batch,\r\n//   yearofEntry,\r\n//   bScCertificate,\r\n//   totalNewStudentsPerSemester,\r\n//   totalNewStudentsPerYear,\r\n//   isEditMode: false,\r\n// });\r\n\r\nconst CustomTableCell = ({ row, name, onChange }) => {\r\n  const classes = useStyles();\r\n  const { isEditMode } = row;\r\n  return (\r\n    <TableCell align=\"left\" className={classes.tableCell}>\r\n      {isEditMode ? (\r\n        <Input\r\n          inputProps={{ min: 0, style: { textAlign: \"center\" } }}\r\n          value={row[name]}\r\n          name={name}\r\n          onChange={(e) => onChange(e, row)}\r\n          className={classes.input}\r\n        />\r\n      ) : (\r\n        row[name]\r\n      )}\r\n    </TableCell>\r\n  );\r\n};\r\n\r\nconst CustomTableCellTest = ({ row, name, name2, onChange }) => {\r\n  const classes = useStyles();\r\n  const { isEditMode } = row;\r\n  return (\r\n    <TableCell align=\"left\" className={classes.tableCell}>\r\n      {isEditMode ? (\r\n        <>\r\n          <Input\r\n            inputProps={{ min: 0, style: { textAlign: \"center\" } }}\r\n            value={row[name]}\r\n            name={name}\r\n            onChange={(e) => onChange(e, row)}\r\n            className={classes.input}\r\n          />\r\n          <Input\r\n            inputProps={{ min: 0, style: { textAlign: \"center\" } }}\r\n            value={row[name2]}\r\n            name={name2}\r\n            onChange={(e) => onChange(e, row)}\r\n            className={classes.input}\r\n          />\r\n        </>\r\n      ) : (\r\n        <>\r\n          <>{row[name]}</> <br></br> <>{row[name2]}</>\r\n        </>\r\n      )}\r\n    </TableCell>\r\n  );\r\n};\r\n\r\nfunction EditableTable() {\r\n  const [rows, setRows] = React.useState([\r\n    {\r\n      id: 1,\r\n      batch: \"1\",\r\n      yearOfEntry: \"19/20\",\r\n      yearOfEntry2: \"19/20\",\r\n      BUE: \"1\",\r\n      BUE2: \"1\",\r\n      NonBUE: \"0\",\r\n      NonBUE2: \"0\",\r\n      totalNewStudentsPerSemester: 15,\r\n      totalNewStudentsPerSemester2: 15,\r\n      totalStudentsPerYear: 5,\r\n      totalStudentsPerYear2: 5,\r\n    },\r\n    {\r\n      id: 2,\r\n      batch: \"2\",\r\n      yearOfEntry: \"18/19\",\r\n      yearOfEntry2: \"18/19\",\r\n      BUE: \"9\",\r\n      BUE2: \"9\",\r\n      NonBUE: \"2\",\r\n      NonBUE2: \"2\",\r\n      totalNewStudentsPerSemester: 10,\r\n      totalNewStudentsPerSemester2: 10,\r\n      totalStudentsPerYear: 5,\r\n      totalStudentsPerYear2: 5,\r\n    },\r\n    {\r\n      id: 3,\r\n      batch: \"3\",\r\n      yearOfEntry: \"17/18\",\r\n      yearOfEntry2: \"17/18\",\r\n      BUE: \"4\",\r\n      BUE2: \"4\",\r\n      NonBUE: \"1\",\r\n      NonBUE2: \"1\",\r\n      totalNewStudentsPerSemester: 3,\r\n      totalNewStudentsPerSemester2: 3,\r\n      totalStudentsPerYear: 2,\r\n      totalStudentsPerYear2: 2,\r\n    },\r\n    {\r\n      id: 4,\r\n      batch: \"4\",\r\n      yearOfEntry: \"16/17\",\r\n      yearOfEntry2: \"16/17\",\r\n      BUE: \"7\",\r\n      BUE2: \"7\",\r\n      NonBUE: \"0\",\r\n      NonBUE2: \"0\",\r\n      totalNewStudentsPerSemester: 15,\r\n      totalNewStudentsPerSemester2: 15,\r\n      totalStudentsPerYear: 6,\r\n      totalStudentsPerYear2: 6,\r\n    },\r\n  ]);\r\n  const [previous, setPrevious] = React.useState({});\r\n  const classes = useStyles();\r\n\r\n  const onToggleEditMode = (id) => {\r\n    setRows((state) => {\r\n      return rows.map((row) => {\r\n        if (row.id === id) {\r\n          return { ...row, isEditMode: !row.isEditMode };\r\n        }\r\n        return row;\r\n      });\r\n    });\r\n  };\r\n\r\n  const onChange = (e, row) => {\r\n    if (!previous[row.id]) {\r\n      setPrevious((state) => ({ ...state, [row.id]: row }));\r\n    }\r\n    const value = e.target.value;\r\n    const name = e.target.name;\r\n    const { id } = row;\r\n    const newRows = rows.map((row) => {\r\n      if (row.id === id) {\r\n        return { ...row, [name]: value };\r\n      }\r\n      return row;\r\n    });\r\n    setRows(newRows);\r\n  };\r\n\r\n  const onRevert = (id) => {\r\n    const newRows = rows.map((row) => {\r\n      if (row.id === id) {\r\n        return previous[id] ? previous[id] : row;\r\n      }\r\n      return row;\r\n    });\r\n    setRows(newRows);\r\n    setPrevious((state) => {\r\n      delete state[id];\r\n      return state;\r\n    });\r\n    onToggleEditMode(id);\r\n  };\r\n\r\n  return (\r\n    <Paper className={classes.root}>\r\n      <Table className={classes.table} aria-label=\"caption table\">\r\n        <TableHead>\r\n          <TableRow style={{ backgroundColor: \"#AF0000\" }}>\r\n            <TableCell className={classes.tableHeaderText} align=\"left\" />\r\n            <TableCell\r\n              className={classes.tableHeaderText}\r\n              align=\"left\"\r\n              style={{ paddingBottom: \"10px\" }}\r\n            ></TableCell>\r\n            <TableCell\r\n              className={classes.tableHeaderText}\r\n              align=\"left\"\r\n            ></TableCell>\r\n            <TableCell\r\n              colSpan={2}\r\n              className={classes.tableHeaderText}\r\n              align=\"left\"\r\n            >\r\n              B. Sc Certificate\r\n            </TableCell>\r\n\r\n            <TableCell\r\n              className={classes.tableHeaderText}\r\n              align=\"left\"\r\n            ></TableCell>\r\n            <TableCell\r\n              className={classes.tableHeaderText}\r\n              align=\"left\"\r\n            ></TableCell>\r\n          </TableRow>\r\n\r\n          <TableRow style={{ backgroundColor: \"#AF0000\" }}>\r\n            <TableCell\r\n              className={classes.tableHeaderEmpty}\r\n              align=\"left\"\r\n            ></TableCell>\r\n            <TableCell className={classes.tableHeaderEmpty} align=\"left\">\r\n              Batch\r\n            </TableCell>\r\n            <TableCell className={classes.tableHeaderEmpty} align=\"left\">\r\n              Year of Entry\r\n            </TableCell>\r\n            <TableCell className={classes.tableHeaderText} align=\"left\">\r\n              BUE\r\n            </TableCell>\r\n            <TableCell className={classes.tableHeaderText} align=\"left\">\r\n              NonBUE\r\n            </TableCell>\r\n            <TableCell className={classes.tableHeaderEmpty} align=\"left\">\r\n              Total New Students/Semester\r\n            </TableCell>\r\n            <TableCell className={classes.tableHeaderEmpty} align=\"left\">\r\n              Total Students/Year\r\n            </TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {rows.map((row) => (\r\n            <TableRow key={row.id}>\r\n              <TableCell className={classes.selectTableCell}>\r\n                {row.isEditMode ? (\r\n                  <>\r\n                    <IconButton\r\n                      aria-label=\"done\"\r\n                      onClick={() => onToggleEditMode(row.id)}\r\n                    >\r\n                      <DoneIcon />\r\n                    </IconButton>\r\n                    <IconButton\r\n                      aria-label=\"revert\"\r\n                      onClick={() => onRevert(row.id)}\r\n                    >\r\n                      <RevertIcon />\r\n                    </IconButton>\r\n                  </>\r\n                ) : (\r\n                  <IconButton\r\n                    aria-label=\"delete\"\r\n                    onClick={() => onToggleEditMode(row.id)}\r\n                  >\r\n                    <EditIcon />\r\n                  </IconButton>\r\n                )}\r\n              </TableCell>\r\n\r\n              <CustomTableCell {...{ row, name: \"batch\", onChange }} />\r\n\r\n              <CustomTableCellTest\r\n                {...{\r\n                  row,\r\n                  name: \"yearOfEntry\",\r\n                  name2: \"yearOfEntry2\",\r\n                  onChange,\r\n                }}\r\n              />\r\n              <CustomTableCellTest\r\n                {...{ row, name: \"BUE\", name2: \"BUE2\", onChange }}\r\n              />\r\n              <CustomTableCellTest\r\n                {...{ row, name: \"NonBUE\", name2: \"NonBUE2\", onChange }}\r\n              />\r\n              <CustomTableCellTest\r\n                {...{\r\n                  row,\r\n                  name: \"totalNewStudentsPerSemester\",\r\n                  name2: \"totalNewStudentsPerSemester2\",\r\n                  onChange,\r\n                }}\r\n              />\r\n              <CustomTableCellTest\r\n                {...{\r\n                  row,\r\n                  name: \"totalStudentsPerYear\",\r\n                  name2: \"totalStudentsPerYear2\",\r\n                  onChange,\r\n                }}\r\n              />\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </Paper>\r\n  );\r\n}\r\n\r\nexport default EditableTable;\r\n","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\EnglishLanguageLevels\\EnglishTableUI.jsx",[],"C:\\Users\\moonl\\apr\\src\\components\\Header\\HeaderTest.jsx",[],"C:\\Users\\moonl\\apr\\src\\components\\Header\\Header.jsx",[],["168","169"],"C:\\Users\\moonl\\apr\\src\\components\\Header\\AppBarCollapse.js",[],"C:\\Users\\moonl\\apr\\src\\components\\Header\\ButtonAppBarCollapse.js",[],"C:\\Users\\moonl\\apr\\src\\components\\Tabels\\StaffStudentComMeetings\\StaffStudentComMeetings.jsx",[],"C:\\Users\\moonl\\apr\\src\\components\\Tabels\\ReuseableTable.jsx",[],"C:\\Users\\moonl\\apr\\src\\components\\Tabels\\ProgramFeedback\\ProgramFeedback.jsx",[],"C:\\Users\\moonl\\apr\\src\\components\\Tabels\\TeachingStaff\\TeachingStaff.jsx",[],"C:\\Users\\moonl\\apr\\src\\components\\Tabels\\LSBULinkTutorReports\\LSBULinkTutorReports.jsx",[],"C:\\Users\\moonl\\apr\\src\\components\\Tabels\\ReviewOfAssessments\\ReviewOfAssessments.jsx",[],"C:\\Users\\moonl\\apr\\src\\components\\Tabels\\ExternalExaminerReport\\ExternalExaminerReport.jsx",[],"C:\\Users\\moonl\\apr\\src\\components\\Tabels\\ModuleSpecifications\\ModuleSpecifications.jsx",[],"C:\\Users\\moonl\\apr\\src\\components\\Tabels\\StaffBreakDownForTheCurrentAY\\StaffBreakDownForTheCurrentAY.jsx",[],"C:\\Users\\moonl\\apr\\src\\components\\Tabels\\StaffBreakDownForTheCurrentAY\\StaffBreakDownTableUI.jsx",[],"C:\\Users\\moonl\\apr\\src\\components\\Tabels\\StudentProfileAndMarketing\\StudentProfileAndMarketing.jsx",[],"C:\\Users\\moonl\\apr\\src\\components\\Tabels\\StudentProfileAndMarketing\\StudentProfileTableUI.jsx",[],"C:\\Users\\moonl\\apr\\src\\components\\Tabels\\SupportingDocumentation\\SupportingDocumentation.jsx",[],"C:\\Users\\moonl\\apr\\src\\components\\Tabels\\SupportingDocumentation\\SupDocTableUI.jsx",[],"C:\\Users\\moonl\\apr\\src\\components\\Tabels\\ProgramBoardDecisions\\PBDMain.jsx",[],"C:\\Users\\moonl\\apr\\src\\components\\Tabels\\ProgramBoardDecisions\\PBDTables\\CoreModulesTable.jsx",["170"],"import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport AboveTableText from \"../../../AboveTableText\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    marginTop: theme.spacing(3),\r\n    overflowX: \"auto\",\r\n  },\r\n  table: {\r\n    minWidth: 650,\r\n    borderCollapse: \"separate\",\r\n  },\r\n  selectTableCell: {\r\n    width: 60,\r\n  },\r\n  tableCell: {\r\n    maxWidth: \"30vw\",\r\n    height: 40,\r\n    textAlign: \"center\",\r\n    fontSize: \"25px\",\r\n    \"&:hover\": {\r\n      color: \"black\",\r\n      backgroundColor: \"rgb(0, 0, 0, 0.1)\",\r\n    },\r\n  },\r\n  input: {\r\n    width: 130,\r\n    height: 40,\r\n    fontSize: \"25px\",\r\n  },\r\n  tableHeaderText: {\r\n    color: \"white\",\r\n    textAlign: \"center\",\r\n    borderBottom: \"none\",\r\n    fontSize: \"1.1em\",\r\n    border: \"1px solid white\",\r\n  },\r\n  tableHeaderEmpty: {\r\n    color: \"white\",\r\n    textAlign: \"center\",\r\n    borderBottom: \"none\",\r\n    fontSize: \"1.1em\",\r\n    borderRight: \"1px solid white\",\r\n    borderLeft: \"1px solid white\",\r\n  },\r\n}));\r\n\r\nconst CustomTableCell = ({ row, name, totalStud, onChange }) => {\r\n  const classes = useStyles();\r\n  const { isEditMode } = row;\r\n  const percentage = ((row[name] * 100) / row[totalStud]).toFixed(1);\r\n  return (\r\n    <TableCell align=\"left\" className={classes.tableCell}>\r\n      {isEditMode ? (\r\n        <Input\r\n          inputProps={{ min: 0, style: { textAlign: \"center\" } }}\r\n          value={row[name]}\r\n          name={name}\r\n          onChange={(e) => onChange(e, row)}\r\n          className={classes.input}\r\n        />\r\n      ) : (\r\n        <>{totalStud ? row[name] + `\\n (${percentage}%)` : row[name]}</>\r\n      )}\r\n    </TableCell>\r\n  );\r\n};\r\nlet semesterOneCols = 0;\r\nlet semesterTwoCols = 0;\r\nconst SemesterModulesNumber = (rows) => {\r\n  semesterOneCols = 0;\r\n  semesterTwoCols = 0;\r\n  rows.forEach(function (Item) {\r\n    Item.semester === 1 ? semesterOneCols++ : semesterTwoCols++;\r\n  });\r\n};\r\n\r\nfunction EditableTable(props) {\r\n  const [rows, setRows] = React.useState([\r\n    {\r\n      id: 1,\r\n      semester: 1,\r\n      module: \"Intro to Web Science\",\r\n      totalNumberOfStudents: 12,\r\n      studentsFirstAttempt: 12,\r\n      studentsSecondAttempt: \"10\",\r\n      studentPassImprove: \"1\",\r\n    },\r\n    {\r\n      id: 2,\r\n      semester: 1,\r\n      module: \"Service Oriented SE\",\r\n      totalNumberOfStudents: 14,\r\n      studentsFirstAttempt: \"2\",\r\n      studentsSecondAttempt: \"10\",\r\n      studentPassImprove: \"1\",\r\n    },\r\n    {\r\n      id: 3,\r\n      semester: 1,\r\n      module: \"Web Modeling\",\r\n      totalNumberOfStudents: 15,\r\n      studentsFirstAttempt: \"4\",\r\n      studentsSecondAttempt: \"10\",\r\n      studentPassImprove: \"1\",\r\n    },\r\n    {\r\n      id: 5,\r\n      semester: 1,\r\n      module: \"Data Science\",\r\n      totalNumberOfStudents: 999,\r\n      studentsFirstAttempt: \"2\",\r\n      studentsSecondAttempt: \"10\",\r\n      studentPassImprove: \"1\",\r\n    },\r\n    {\r\n      id: 4,\r\n      semester: 2,\r\n      module: \"Web Topologies\",\r\n      totalNumberOfStudents: 16,\r\n      studentsFirstAttempt: \"9\",\r\n      studentsSecondAttempt: \"10\",\r\n      studentPassImprove: \"1\",\r\n    },\r\n    {\r\n      id: 5,\r\n      semester: 2,\r\n      module: \"Data Science\",\r\n      totalNumberOfStudents: 999,\r\n      studentsFirstAttempt: \"2\",\r\n      studentsSecondAttempt: \"10\",\r\n      studentPassImprove: \"1\",\r\n    },\r\n    {\r\n      id: 5,\r\n      semester: 2,\r\n      module: \"Data Science\",\r\n      totalNumberOfStudents: 999,\r\n      studentsFirstAttempt: \"2\",\r\n      studentsSecondAttempt: \"10\",\r\n      studentPassImprove: \"1\",\r\n    },\r\n  ]);\r\n  SemesterModulesNumber(rows);\r\n  const [previous, setPrevious] = React.useState({});\r\n  const classes = useStyles();\r\n\r\n  const onToggleEditMode = (id) => {\r\n    setRows((state) => {\r\n      return rows.map((row) => {\r\n        if (row.id === id) {\r\n          return { ...row, isEditMode: !row.isEditMode };\r\n        }\r\n        return row;\r\n      });\r\n    });\r\n  };\r\n\r\n  const onChange = (e, row) => {\r\n    if (!previous[row.id]) {\r\n      setPrevious((state) => ({ ...state, [row.id]: row }));\r\n    }\r\n    const value = e.target.value;\r\n    const name = e.target.name;\r\n    const { id } = row;\r\n    const newRows = rows.map((row) => {\r\n      if (row.id === id) {\r\n        return { ...row, [name]: value };\r\n      }\r\n      return row;\r\n    });\r\n    setRows(newRows);\r\n  };\r\n\r\n  const onRevert = (id) => {\r\n    const newRows = rows.map((row) => {\r\n      if (row.id === id) {\r\n        return previous[id] ? previous[id] : row;\r\n      }\r\n      return row;\r\n    });\r\n    setRows(newRows);\r\n    setPrevious((state) => {\r\n      delete state[id];\r\n      return state;\r\n    });\r\n    onToggleEditMode(id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AboveTableText headerText={\"Core modules\"} />\r\n      <Paper className={classes.root}>\r\n        <Table className={classes.table} aria-label=\"caption table\">\r\n          <TableHead>\r\n            <TableRow style={{ backgroundColor: \"#AF0000\" }}>\r\n              <TableCell className={classes.tableHeaderText} align=\"left\" />\r\n              <TableCell\r\n                className={classes.tableHeaderText}\r\n                align=\"left\"\r\n                style={{ paddingBottom: \"10px\" }}\r\n                colSpan={2}\r\n              ></TableCell>\r\n              <TableCell\r\n                className={classes.tableHeaderText}\r\n                align=\"left\"\r\n                colSpan={semesterOneCols}\r\n              >\r\n                Semester 1\r\n              </TableCell>\r\n              <TableCell\r\n                colSpan={semesterTwoCols}\r\n                className={classes.tableHeaderText}\r\n                align=\"left\"\r\n              >\r\n                Semester 2\r\n              </TableCell>\r\n            </TableRow>\r\n\r\n            <TableRow style={{ backgroundColor: \"#AF0000\" }}>\r\n              <TableCell\r\n                className={classes.tableHeaderEmpty}\r\n                align=\"left\"\r\n              ></TableCell>\r\n              <TableCell\r\n                colSpan={2}\r\n                rowSpan={2}\r\n                className={classes.tableHeaderEmpty}\r\n                align=\"left\"\r\n              >\r\n                Module Code and Title\r\n              </TableCell>\r\n              {rows.map((row) => (\r\n                <TableCell className={classes.tableHeaderText} align=\"left\">\r\n                  {row.module}\r\n                </TableCell>\r\n              ))}\r\n            </TableRow>\r\n          </TableHead>\r\n\r\n          <TableBody>\r\n            <TableRow>\r\n              <TableCell>1</TableCell>\r\n              <TableCell\r\n                colSpan={2}\r\n                style={{ fontWeight: \"bold\", fontSize: \"20px\" }}\r\n              >\r\n                Total Number of Students\r\n              </TableCell>\r\n              {rows.map((row) => (\r\n                <CustomTableCell\r\n                  {...{ row, name: \"totalNumberOfStudents\", onChange }}\r\n                />\r\n              ))}\r\n            </TableRow>\r\n\r\n            <TableRow>\r\n              <TableCell>1</TableCell>\r\n              <TableCell style={{ fontWeight: \"bold\", fontSize: \"18px\" }}>\r\n                Pass at first Attempt\r\n              </TableCell>\r\n              <TableCell>\r\n                <TableRow style={{ fontSize: \"18px\" }}>Students</TableRow>\r\n                <TableRow style={{ fontSize: \"18px\" }}>Percentage</TableRow>\r\n              </TableCell>\r\n              {rows.map((row) => (\r\n                <CustomTableCell\r\n                  {...{\r\n                    row,\r\n                    name: \"studentsFirstAttempt\",\r\n                    totalStud: \"totalNumberOfStudents\",\r\n                    onChange,\r\n                  }}\r\n                />\r\n              ))}\r\n            </TableRow>\r\n\r\n            <TableRow>\r\n              <TableCell>1</TableCell>\r\n              <TableCell style={{ fontWeight: \"bold\", fontSize: \"18px\" }}>\r\n                Pass at Second Attempt\r\n              </TableCell>\r\n              <TableCell>\r\n                <TableRow style={{ fontSize: \"18px\" }}>Students</TableRow>\r\n                <TableRow style={{ fontSize: \"18px\" }}>Percentage</TableRow>\r\n              </TableCell>\r\n              {rows.map((row) => (\r\n                <CustomTableCell\r\n                  {...{\r\n                    row,\r\n                    name: \"studentsSecondAttempt\",\r\n                    totalStud: \"totalNumberOfStudents\",\r\n                    onChange,\r\n                  }}\r\n                />\r\n              ))}\r\n            </TableRow>\r\n\r\n            <TableRow>\r\n              <TableCell>1</TableCell>\r\n              <TableCell style={{ fontWeight: \"bold\", fontSize: \"18px\" }}>\r\n                Pass at second attempt in order to improve GPA\r\n              </TableCell>\r\n              <TableCell>\r\n                <TableRow style={{ fontSize: \"18px\" }}>Students</TableRow>\r\n                <TableRow style={{ fontSize: \"18px\" }}>Percentage</TableRow>\r\n              </TableCell>\r\n              {rows.map((row) => (\r\n                <CustomTableCell\r\n                  {...{\r\n                    row,\r\n                    name: \"studentPassImprove\",\r\n                    totalStud: \"totalNumberOfStudents\",\r\n                    onChange,\r\n                  }}\r\n                />\r\n              ))}\r\n            </TableRow>\r\n          </TableBody>\r\n        </Table>\r\n      </Paper>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default EditableTable;\r\n","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\ProgramBoardDecisions\\PBDTables\\SummaryProbationPeriod.jsx",["171"],"import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport AboveTableText from \"../../../AboveTableText\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    marginTop: theme.spacing(3),\r\n    overflowX: \"auto\",\r\n  },\r\n  table: {\r\n    minWidth: 650,\r\n    borderCollapse: \"separate\",\r\n  },\r\n  selectTableCell: {\r\n    width: 60,\r\n  },\r\n  tableCell: {\r\n    maxWidth: \"30vw\",\r\n    height: 40,\r\n    textAlign: \"center\",\r\n    fontSize: \"25px\",\r\n    \"&:hover\": {\r\n      color: \"black\",\r\n      backgroundColor: \"rgb(0, 0, 0, 0.1)\",\r\n    },\r\n  },\r\n  input: {\r\n    width: 130,\r\n    height: 40,\r\n    fontSize: \"25px\",\r\n  },\r\n  tableHeaderText: {\r\n    color: \"white\",\r\n    textAlign: \"center\",\r\n    borderBottom: \"none\",\r\n    fontSize: \"1.1em\",\r\n    border: \"1px solid white\",\r\n  },\r\n  tableHeaderEmpty: {\r\n    color: \"white\",\r\n    textAlign: \"center\",\r\n    borderBottom: \"none\",\r\n    fontSize: \"1.1em\",\r\n    borderRight: \"1px solid white\",\r\n    borderLeft: \"1px solid white\",\r\n  },\r\n}));\r\n\r\n// const createData = (\r\n//   batch,\r\n//   yearofEntry,\r\n//   bScCertificate,\r\n//   totalNewStudentsPerSemester,\r\n//   totalNewStudentsPerYear\r\n// ) => ({\r\n//   id: batch.replace(\" \", \"_\"),\r\n//   batch,\r\n//   yearofEntry,\r\n//   bScCertificate,\r\n//   totalNewStudentsPerSemester,\r\n//   totalNewStudentsPerYear,\r\n//   isEditMode: false,\r\n// });\r\n\r\nconst CustomTableCell = ({ row, name, totalStud, onChange }) => {\r\n  const classes = useStyles();\r\n  const { isEditMode } = row;\r\n  const percentage = ((row[name] * 100) / row[totalStud]).toFixed(1);\r\n  return (\r\n    <TableCell align=\"left\" className={classes.tableCell}>\r\n      {isEditMode ? (\r\n        <Input\r\n          inputProps={{ min: 0, style: { textAlign: \"center\" } }}\r\n          value={row[name]}\r\n          name={name}\r\n          onChange={(e) => onChange(e, row)}\r\n          className={classes.input}\r\n        />\r\n      ) : (\r\n        <>{totalStud ? row[name] + `\\n (${percentage}%)` : row[name]}</>\r\n      )}\r\n    </TableCell>\r\n  );\r\n};\r\n\r\nfunction EditableTable() {\r\n  const [rows, setRows] = React.useState([\r\n    {\r\n      id: 1,\r\n      totalNumberOfStudents: 100,\r\n      entryStudents: 20,\r\n      continued: 10,\r\n      enhancingModules: 20,\r\n      repeatingModules: 5,\r\n      totalProgressingToThesis: 9,\r\n    },\r\n    {\r\n      id: 2,\r\n      totalNumberOfStudents: 70,\r\n      entryStudents: 5,\r\n      continued: 9,\r\n      enhancingModules: 2,\r\n      repeatingModules: 5,\r\n      totalProgressingToThesis: 7,\r\n    },\r\n    {\r\n      id: 3,\r\n      totalNumberOfStudents: 50,\r\n      entryStudents: 9,\r\n      continued: 6,\r\n      enhancingModules: 7,\r\n      repeatingModules: 5,\r\n      totalProgressingToThesis: 3,\r\n    },\r\n  ]);\r\n  const [previous, setPrevious] = React.useState({});\r\n  const classes = useStyles();\r\n\r\n  const onToggleEditMode = (id) => {\r\n    setRows((state) => {\r\n      return rows.map((row) => {\r\n        if (row.id === id) {\r\n          return { ...row, isEditMode: !row.isEditMode };\r\n        }\r\n        return row;\r\n      });\r\n    });\r\n  };\r\n\r\n  const onChange = (e, row) => {\r\n    if (!previous[row.id]) {\r\n      setPrevious((state) => ({ ...state, [row.id]: row }));\r\n    }\r\n    const value = e.target.value;\r\n    const name = e.target.name;\r\n    const { id } = row;\r\n    const newRows = rows.map((row) => {\r\n      if (row.id === id) {\r\n        return { ...row, [name]: value };\r\n      }\r\n      return row;\r\n    });\r\n    setRows(newRows);\r\n  };\r\n\r\n  const onRevert = (id) => {\r\n    const newRows = rows.map((row) => {\r\n      if (row.id === id) {\r\n        return previous[id] ? previous[id] : row;\r\n      }\r\n      return row;\r\n    });\r\n    setRows(newRows);\r\n    setPrevious((state) => {\r\n      delete state[id];\r\n      return state;\r\n    });\r\n    onToggleEditMode(id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AboveTableText headerText={\"Summary probation period\"} />\r\n      <Paper className={classes.root}>\r\n        <Table className={classes.table} aria-label=\"caption table\">\r\n          <TableHead>\r\n            <TableRow style={{ backgroundColor: \"#AF0000\" }}>\r\n              <TableCell className={classes.tableHeaderText} align=\"left\" />\r\n              <TableCell\r\n                className={classes.tableHeaderText}\r\n                align=\"left\"\r\n                style={{ paddingBottom: \"10px\" }}\r\n              >\r\n                Item\r\n              </TableCell>\r\n\r\n              <TableCell className={classes.tableHeaderText} align=\"left\">\r\n                2018/2019\r\n              </TableCell>\r\n\r\n              <TableCell className={classes.tableHeaderText} align=\"left\">\r\n                2017/2018\r\n              </TableCell>\r\n\r\n              <TableCell className={classes.tableHeaderText} align=\"left\">\r\n                2016/2017\r\n              </TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n\r\n          <TableBody>\r\n            <TableRow>\r\n              <TableCell>1</TableCell>\r\n              <TableCell style={{ fontWeight: \"bold\", fontSize: \"18px\" }}>\r\n                Total Number of Students\r\n              </TableCell>\r\n              {rows.map((row) => (\r\n                <CustomTableCell\r\n                  {...{ row, name: \"totalNumberOfStudents\", onChange }}\r\n                />\r\n              ))}\r\n            </TableRow>\r\n\r\n            <TableRow>\r\n              <TableCell>1</TableCell>\r\n              <TableCell style={{ fontWeight: \"bold\", fontSize: \"18px\" }}>\r\n                Entry Students\r\n              </TableCell>\r\n\r\n              {rows.map((row) => (\r\n                <CustomTableCell\r\n                  {...{\r\n                    row,\r\n                    name: \"entryStudents\",\r\n                    totalStud: \"totalNumberOfStudents\",\r\n                    onChange,\r\n                  }}\r\n                />\r\n              ))}\r\n            </TableRow>\r\n\r\n            <TableRow>\r\n              <TableCell>1</TableCell>\r\n              <TableCell style={{ fontWeight: \"bold\", fontSize: \"18px\" }}>\r\n                Continued\r\n              </TableCell>\r\n\r\n              {rows.map((row) => (\r\n                <CustomTableCell\r\n                  {...{\r\n                    row,\r\n                    name: \"continued\",\r\n                    totalStud: \"totalNumberOfStudents\",\r\n                    onChange,\r\n                  }}\r\n                />\r\n              ))}\r\n            </TableRow>\r\n\r\n            <TableRow>\r\n              <TableCell>1</TableCell>\r\n              <TableCell style={{ fontWeight: \"bold\", fontSize: \"18px\" }}>\r\n                Enhancing Modules\r\n              </TableCell>\r\n              {rows.map((row) => (\r\n                <CustomTableCell\r\n                  {...{\r\n                    row,\r\n                    name: \"enhancingModules\",\r\n                    totalStud: \"totalNumberOfStudents\",\r\n                    onChange,\r\n                  }}\r\n                />\r\n              ))}\r\n            </TableRow>\r\n            <TableRow>\r\n              <TableCell>1</TableCell>\r\n              <TableCell style={{ fontWeight: \"bold\", fontSize: \"18px\" }}>\r\n                Repeating Modules\r\n              </TableCell>\r\n              {rows.map((row) => (\r\n                <CustomTableCell\r\n                  {...{\r\n                    row,\r\n                    name: \"repeatingModules\",\r\n                    totalStud: \"totalNumberOfStudents\",\r\n                    onChange,\r\n                  }}\r\n                />\r\n              ))}\r\n            </TableRow>\r\n            <TableRow>\r\n              <TableCell>1</TableCell>\r\n              <TableCell style={{ fontWeight: \"bold\", fontSize: \"18px\" }}>\r\n                Total progressing to thesis\r\n              </TableCell>\r\n              {rows.map((row) => (\r\n                <CustomTableCell\r\n                  {...{\r\n                    row,\r\n                    name: \"totalProgressingToThesis\",\r\n                    totalStud: \"totalNumberOfStudents\",\r\n                    onChange,\r\n                  }}\r\n                />\r\n              ))}\r\n            </TableRow>\r\n          </TableBody>\r\n        </Table>\r\n      </Paper>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default EditableTable;\r\n","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\ProgramBoardDecisions\\PBDTables\\ProgressionThesisProposal.jsx",["172"],"import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport AboveTableText from \"../../../AboveTableText\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    marginTop: theme.spacing(3),\r\n    overflowX: \"auto\",\r\n  },\r\n  table: {\r\n    minWidth: 650,\r\n    borderCollapse: \"separate\",\r\n  },\r\n  selectTableCell: {\r\n    width: 60,\r\n  },\r\n  tableCell: {\r\n    maxWidth: \"30vw\",\r\n    height: 40,\r\n    textAlign: \"center\",\r\n    fontSize: \"25px\",\r\n    \"&:hover\": {\r\n      color: \"black\",\r\n      backgroundColor: \"rgb(0, 0, 0, 0.1)\",\r\n    },\r\n  },\r\n  input: {\r\n    width: 130,\r\n    height: 40,\r\n    fontSize: \"25px\",\r\n  },\r\n  tableHeaderText: {\r\n    color: \"white\",\r\n    textAlign: \"center\",\r\n    borderBottom: \"none\",\r\n    fontSize: \"1.1em\",\r\n    border: \"1px solid white\",\r\n  },\r\n  tableHeaderEmpty: {\r\n    color: \"white\",\r\n    textAlign: \"center\",\r\n    borderBottom: \"none\",\r\n    fontSize: \"1.1em\",\r\n    borderRight: \"1px solid white\",\r\n    borderLeft: \"1px solid white\",\r\n  },\r\n}));\r\n\r\n// const createData = (\r\n//   batch,\r\n//   yearofEntry,\r\n//   bScCertificate,\r\n//   totalNewStudentsPerSemester,\r\n//   totalNewStudentsPerYear\r\n// ) => ({\r\n//   id: batch.replace(\" \", \"_\"),\r\n//   batch,\r\n//   yearofEntry,\r\n//   bScCertificate,\r\n//   totalNewStudentsPerSemester,\r\n//   totalNewStudentsPerYear,\r\n//   isEditMode: false,\r\n// });\r\n\r\nconst CustomTableCell = ({ row, name, onChange }) => {\r\n  const classes = useStyles();\r\n  const { isEditMode } = row;\r\n  return (\r\n    <TableCell align=\"left\" className={classes.tableCell}>\r\n      {isEditMode ? (\r\n        <Input\r\n          inputProps={{ min: 0, style: { textAlign: \"center\" } }}\r\n          value={row[name]}\r\n          name={name}\r\n          onChange={(e) => onChange(e, row)}\r\n          className={classes.input}\r\n        />\r\n      ) : (\r\n        row[name]\r\n      )}\r\n    </TableCell>\r\n  );\r\n};\r\n\r\nfunction EditableTable() {\r\n  const [rows, setRows] = React.useState([\r\n    // createData(\"1\", 159, 6.0, 24, 4.0),\r\n    // createData(\"2\", 237, 9.0, 37, 4.3),\r\n    // createData(\"3\", 262, 16.0, 24, 6.0),\r\n    // createData(\"3\", 262, 16.0, 24, 6.0),\r\n    // createData(\"3\", 262, 16.0, 24, 6.0),\r\n    // createData(\"3\", 262, 16.0, 24, 6.0),\r\n    {\r\n      id: 1,\r\n      batch: \"1\",\r\n      yearOfEntry: \"S1 18/19\",\r\n      totalNoInProgram: 80,\r\n      studentsQualified: 10,\r\n      qualifiedProgressionPerc: 5,\r\n      studentsSubmittedProposal: 20,\r\n      submittedProgreesionPerc: 30,\r\n    },\r\n    {\r\n      id: 2,\r\n      batch: \"2\",\r\n      yearOfEntry: \"S1 17/18\",\r\n      totalNoInProgram: 100,\r\n      studentsQualified: 8,\r\n      qualifiedProgressionPerc: 9,\r\n      studentsSubmittedProposal: 65,\r\n      submittedProgreesionPerc: 33,\r\n    },\r\n    {\r\n      id: 3,\r\n      batch: \"3\",\r\n      yearOfEntry: \"S2 16/17\",\r\n      totalNoInProgram: 50,\r\n      studentsQualified: 10,\r\n      qualifiedProgressionPerc: 14,\r\n      studentsSubmittedProposal: 20,\r\n      submittedProgreesionPerc: 7,\r\n    },\r\n  ]);\r\n  const [previous, setPrevious] = React.useState({});\r\n  const classes = useStyles();\r\n\r\n  const onToggleEditMode = (id) => {\r\n    setRows((state) => {\r\n      return rows.map((row) => {\r\n        if (row.id === id) {\r\n          return { ...row, isEditMode: !row.isEditMode };\r\n        }\r\n        return row;\r\n      });\r\n    });\r\n  };\r\n\r\n  const onChange = (e, row) => {\r\n    if (!previous[row.id]) {\r\n      setPrevious((state) => ({ ...state, [row.id]: row }));\r\n    }\r\n    const value = e.target.value;\r\n    const name = e.target.name;\r\n    const { id } = row;\r\n    const newRows = rows.map((row) => {\r\n      if (row.id === id) {\r\n        return { ...row, [name]: value };\r\n      }\r\n      return row;\r\n    });\r\n    setRows(newRows);\r\n  };\r\n\r\n  const onRevert = (id) => {\r\n    const newRows = rows.map((row) => {\r\n      if (row.id === id) {\r\n        return previous[id] ? previous[id] : row;\r\n      }\r\n      return row;\r\n    });\r\n    setRows(newRows);\r\n    setPrevious((state) => {\r\n      delete state[id];\r\n      return state;\r\n    });\r\n    onToggleEditMode(id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AboveTableText headerText={\"Progression of thesis proposal\"} />\r\n      <Paper className={classes.root}>\r\n        <Table className={classes.table} aria-label=\"caption table\">\r\n          <TableHead>\r\n            <TableRow style={{ backgroundColor: \"#AF0000\" }}>\r\n              <TableCell\r\n                className={classes.tableHeaderEmpty}\r\n                align=\"left\"\r\n              ></TableCell>\r\n              <TableCell className={classes.tableHeaderEmpty} align=\"left\">\r\n                Batch\r\n              </TableCell>\r\n              <TableCell className={classes.tableHeaderEmpty} align=\"left\">\r\n                Year of Entry to thesis propsal\r\n              </TableCell>\r\n              <TableCell className={classes.tableHeaderText} align=\"left\">\r\n                Total No. in program\r\n              </TableCell>\r\n              <TableCell className={classes.tableHeaderText} align=\"left\">\r\n                Students qualified\r\n              </TableCell>\r\n              <TableCell className={classes.tableHeaderEmpty} align=\"left\">\r\n                Qualified Progression %\r\n              </TableCell>\r\n              <TableCell className={classes.tableHeaderEmpty} align=\"left\">\r\n                Students submitted propsals\r\n              </TableCell>\r\n              <TableCell className={classes.tableHeaderEmpty} align=\"left\">\r\n                Submitted progression %\r\n              </TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {rows.map((row) => (\r\n              <TableRow key={row.id}>\r\n                <TableCell>*</TableCell>\r\n\r\n                <CustomTableCell {...{ row, name: \"batch\", onChange }} />\r\n                <CustomTableCell {...{ row, name: \"yearOfEntry\", onChange }} />\r\n                <CustomTableCell\r\n                  {...{ row, name: \"totalNoInProgram\", onChange }}\r\n                />\r\n                <CustomTableCell\r\n                  {...{ row, name: \"studentsQualified\", onChange }}\r\n                />\r\n                <CustomTableCell\r\n                  {...{ row, name: \"qualifiedProgressionPerc\", onChange }}\r\n                />\r\n                <CustomTableCell\r\n                  {...{ row, name: \"studentsSubmittedProposal\", onChange }}\r\n                />\r\n                <CustomTableCell\r\n                  {...{ row, name: \"submittedProgreesionPerc\", onChange }}\r\n                />\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n        {/*<Button variant=\"contained\" onClick={() => console.log(rows)}>\r\n        print state (TEST ONLY)\r\n                </Button>*/}\r\n      </Paper>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default EditableTable;\r\n","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\ProgramBoardDecisions\\PBDTables\\VoluntaryWithdrawls.jsx",["173"],"import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport AboveTableText from \"../../../AboveTableText\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    marginTop: theme.spacing(3),\r\n    overflowX: \"auto\",\r\n  },\r\n  table: {\r\n    minWidth: 650,\r\n    borderCollapse: \"separate\",\r\n  },\r\n  selectTableCell: {\r\n    width: 60,\r\n  },\r\n  tableCell: {\r\n    maxWidth: \"30vw\",\r\n    height: 40,\r\n    textAlign: \"center\",\r\n    fontSize: \"25px\",\r\n    \"&:hover\": {\r\n      color: \"black\",\r\n      backgroundColor: \"rgb(0, 0, 0, 0.1)\",\r\n    },\r\n  },\r\n  input: {\r\n    width: 130,\r\n    height: 40,\r\n  },\r\n  tableHeaderText: {\r\n    color: \"white\",\r\n    textAlign: \"center\",\r\n    borderBottom: \"none\",\r\n    fontSize: \"1.1em\",\r\n    border: \"1px solid white\",\r\n  },\r\n  tableHeaderEmpty: {\r\n    color: \"white\",\r\n    textAlign: \"center\",\r\n    borderBottom: \"none\",\r\n    fontSize: \"1.1em\",\r\n    borderRight: \"1px solid white\",\r\n    borderLeft: \"1px solid white\",\r\n  },\r\n}));\r\n\r\n// const createData = (\r\n//   batch,\r\n//   yearofEntry,\r\n//   bScCertificate,\r\n//   totalNewStudentsPerSemester,\r\n//   totalNewStudentsPerYear\r\n// ) => ({\r\n//   id: batch.replace(\" \", \"_\"),\r\n//   batch,\r\n//   yearofEntry,\r\n//   bScCertificate,\r\n//   totalNewStudentsPerSemester,\r\n//   totalNewStudentsPerYear,\r\n//   isEditMode: false,\r\n// });\r\n\r\nconst CustomTableCell = ({ row, name, onChange }) => {\r\n  const classes = useStyles();\r\n  const { isEditMode } = row;\r\n  return (\r\n    <TableCell align=\"left\" className={classes.tableCell}>\r\n      {isEditMode ? (\r\n        <Input\r\n          inputProps={{ min: 0, style: { textAlign: \"center\" } }}\r\n          value={row[name]}\r\n          name={name}\r\n          onChange={(e) => onChange(e, row)}\r\n          className={classes.input}\r\n        />\r\n      ) : (\r\n        row[name]\r\n      )}\r\n    </TableCell>\r\n  );\r\n};\r\n\r\nfunction EditableTable() {\r\n  const [rows, setRows] = React.useState([\r\n    {\r\n      id: 1,\r\n      batch: \"1\",\r\n      yearOfEntry: \"S1 18/19\",\r\n      numberOfWithdrawls: 10,\r\n      reasonsForWithdrawl: \"Example 1.....\",\r\n    },\r\n    {\r\n      id: 2,\r\n      batch: \"2\",\r\n      yearOfEntry: \"S1 17/18\",\r\n      numberOfWithdrawls: 15,\r\n      reasonsForWithdrawl: \"Example 2.....\",\r\n    },\r\n    {\r\n      id: 3,\r\n      batch: \"3\",\r\n      yearOfEntry: \"S2 16/17\",\r\n      numberOfWithdrawls: 7,\r\n      reasonsForWithdrawl: \"Example 3.....\",\r\n    },\r\n  ]);\r\n  const [previous, setPrevious] = React.useState({});\r\n  const classes = useStyles();\r\n\r\n  const onToggleEditMode = (id) => {\r\n    setRows((state) => {\r\n      return rows.map((row) => {\r\n        if (row.id === id) {\r\n          return { ...row, isEditMode: !row.isEditMode };\r\n        }\r\n        return row;\r\n      });\r\n    });\r\n  };\r\n\r\n  const onChange = (e, row) => {\r\n    if (!previous[row.id]) {\r\n      setPrevious((state) => ({ ...state, [row.id]: row }));\r\n    }\r\n    const value = e.target.value;\r\n    const name = e.target.name;\r\n    const { id } = row;\r\n    const newRows = rows.map((row) => {\r\n      if (row.id === id) {\r\n        return { ...row, [name]: value };\r\n      }\r\n      return row;\r\n    });\r\n    setRows(newRows);\r\n  };\r\n\r\n  const onRevert = (id) => {\r\n    const newRows = rows.map((row) => {\r\n      if (row.id === id) {\r\n        return previous[id] ? previous[id] : row;\r\n      }\r\n      return row;\r\n    });\r\n    setRows(newRows);\r\n    setPrevious((state) => {\r\n      delete state[id];\r\n      return state;\r\n    });\r\n    onToggleEditMode(id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AboveTableText headerText={\"Voulntary Withdrawls\"} />\r\n      <Paper className={classes.root}>\r\n        <Table className={classes.table} aria-label=\"caption table\">\r\n          <TableHead>\r\n            <TableRow style={{ backgroundColor: \"#AF0000\" }}>\r\n              <TableCell\r\n                className={classes.tableHeaderEmpty}\r\n                align=\"left\"\r\n              ></TableCell>\r\n              <TableCell className={classes.tableHeaderEmpty} align=\"left\">\r\n                Batch\r\n              </TableCell>\r\n              <TableCell className={classes.tableHeaderEmpty} align=\"left\">\r\n                Year\r\n              </TableCell>\r\n              <TableCell className={classes.tableHeaderText} align=\"left\">\r\n                Number of Withdrawls\r\n              </TableCell>\r\n              <TableCell className={classes.tableHeaderText} align=\"left\">\r\n                Reasons for Withdrawl\r\n              </TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {rows.map((row) => (\r\n              <TableRow key={row.id}>\r\n                <TableCell>*</TableCell>\r\n\r\n                <CustomTableCell {...{ row, name: \"batch\", onChange }} />\r\n                <CustomTableCell {...{ row, name: \"yearOfEntry\", onChange }} />\r\n                <CustomTableCell\r\n                  {...{ row, name: \"numberOfWithdrawls\", onChange }}\r\n                />\r\n                <CustomTableCell\r\n                  {...{ row, name: \"reasonsForWithdrawl\", onChange }}\r\n                />\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n        {/*<Button variant=\"contained\" onClick={() => console.log(rows)}>\r\n        print state (TEST ONLY)\r\n                </Button>*/}\r\n      </Paper>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default EditableTable;\r\n","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\ProgramBoardDecisions\\PBDTables\\ExpectedToGraduate.jsx",["174"],"import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport AboveTableText from \"../../../AboveTableText\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    marginTop: theme.spacing(3),\r\n    overflowX: \"auto\",\r\n  },\r\n  table: {\r\n    minWidth: 650,\r\n    borderCollapse: \"separate\",\r\n  },\r\n  selectTableCell: {\r\n    width: 60,\r\n  },\r\n  tableCell: {\r\n    maxWidth: \"30vw\",\r\n    height: 40,\r\n    textAlign: \"center\",\r\n    fontSize: \"25px\",\r\n    \"&:hover\": {\r\n      color: \"black\",\r\n      backgroundColor: \"rgb(0, 0, 0, 0.1)\",\r\n    },\r\n  },\r\n  input: {\r\n    width: 130,\r\n    height: 40,\r\n  },\r\n  tableHeaderText: {\r\n    color: \"white\",\r\n    textAlign: \"center\",\r\n    borderBottom: \"none\",\r\n    fontSize: \"1.1em\",\r\n    border: \"1px solid white\",\r\n  },\r\n  tableHeaderEmpty: {\r\n    color: \"white\",\r\n    textAlign: \"center\",\r\n    borderBottom: \"none\",\r\n    fontSize: \"1.1em\",\r\n    borderRight: \"1px solid white\",\r\n    borderLeft: \"1px solid white\",\r\n  },\r\n}));\r\n\r\n// const createData = (\r\n//   batch,\r\n//   yearofEntry,\r\n//   bScCertificate,\r\n//   totalNewStudentsPerSemester,\r\n//   totalNewStudentsPerYear\r\n// ) => ({\r\n//   id: batch.replace(\" \", \"_\"),\r\n//   batch,\r\n//   yearofEntry,\r\n//   bScCertificate,\r\n//   totalNewStudentsPerSemester,\r\n//   totalNewStudentsPerYear,\r\n//   isEditMode: false,\r\n// });\r\n\r\nconst CustomTableCell = ({ row, name, onChange }) => {\r\n  const classes = useStyles();\r\n  const { isEditMode } = row;\r\n  return (\r\n    <TableCell align=\"left\" className={classes.tableCell}>\r\n      {isEditMode ? (\r\n        <Input\r\n          inputProps={{ min: 0, style: { textAlign: \"center\" } }}\r\n          value={row[name]}\r\n          name={name}\r\n          onChange={(e) => onChange(e, row)}\r\n          className={classes.input}\r\n        />\r\n      ) : (\r\n        row[name]\r\n      )}\r\n    </TableCell>\r\n  );\r\n};\r\n\r\nfunction EditableTable() {\r\n  const [rows, setRows] = React.useState([\r\n    {\r\n      id: 1,\r\n      yearOfEntry: \"S1 18/19\",\r\n      name: \"Mohamed Wael Salah\",\r\n      GPA: \"2.8\",\r\n      status: \"Pending...\",\r\n    },\r\n    {\r\n      id: 2,\r\n      yearOfEntry: \"S1 17/18\",\r\n      name: \"Rana El Masry\",\r\n      GPA: \"0.9\",\r\n      status: \"Graduated\",\r\n    },\r\n    {\r\n      id: 3,\r\n      yearOfEntry: \"S2 16/17\",\r\n      name: \"Habiba\",\r\n      GPA: \"1.0\",\r\n      status: \"Graduated\",\r\n    },\r\n  ]);\r\n  const [previous, setPrevious] = React.useState({});\r\n  const classes = useStyles();\r\n\r\n  const onToggleEditMode = (id) => {\r\n    setRows((state) => {\r\n      return rows.map((row) => {\r\n        if (row.id === id) {\r\n          return { ...row, isEditMode: !row.isEditMode };\r\n        }\r\n        return row;\r\n      });\r\n    });\r\n  };\r\n\r\n  const onChange = (e, row) => {\r\n    if (!previous[row.id]) {\r\n      setPrevious((state) => ({ ...state, [row.id]: row }));\r\n    }\r\n    const value = e.target.value;\r\n    const name = e.target.name;\r\n    const { id } = row;\r\n    const newRows = rows.map((row) => {\r\n      if (row.id === id) {\r\n        return { ...row, [name]: value };\r\n      }\r\n      return row;\r\n    });\r\n    setRows(newRows);\r\n  };\r\n\r\n  const onRevert = (id) => {\r\n    const newRows = rows.map((row) => {\r\n      if (row.id === id) {\r\n        return previous[id] ? previous[id] : row;\r\n      }\r\n      return row;\r\n    });\r\n    setRows(newRows);\r\n    setPrevious((state) => {\r\n      delete state[id];\r\n      return state;\r\n    });\r\n    onToggleEditMode(id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AboveTableText headerText={\"Expected to graduate\"} />\r\n      <Paper className={classes.root}>\r\n        <Table className={classes.table} aria-label=\"caption table\">\r\n          <TableHead>\r\n            <TableRow style={{ backgroundColor: \"#AF0000\" }}>\r\n              <TableCell\r\n                className={classes.tableHeaderEmpty}\r\n                align=\"left\"\r\n              ></TableCell>\r\n              <TableCell className={classes.tableHeaderEmpty} align=\"left\">\r\n                Year of Entry\r\n              </TableCell>\r\n              <TableCell className={classes.tableHeaderText} align=\"left\">\r\n                Name\r\n              </TableCell>\r\n              <TableCell className={classes.tableHeaderText} align=\"left\">\r\n                GPA\r\n              </TableCell>\r\n              <TableCell className={classes.tableHeaderEmpty} align=\"left\">\r\n                Status\r\n              </TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {rows.map((row) => (\r\n              <TableRow key={row.id}>\r\n                <TableCell>*</TableCell>\r\n                <CustomTableCell {...{ row, name: \"yearOfEntry\", onChange }} />\r\n                <CustomTableCell {...{ row, name: \"name\", onChange }} />\r\n                <CustomTableCell {...{ row, name: \"GPA\", onChange }} />\r\n                <CustomTableCell {...{ row, name: \"status\", onChange }} />\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n        {/*<Button variant=\"contained\" onClick={() => console.log(rows)}>\r\n        print state (TEST ONLY)\r\n                </Button>*/}\r\n      </Paper>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default EditableTable;\r\n","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\ProgramBoardDecisions\\PBDTables\\DegreeAwarded.jsx",["175"],"import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport AboveTableText from \"../../../AboveTableText\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    marginTop: theme.spacing(3),\r\n    overflowX: \"auto\",\r\n  },\r\n  table: {\r\n    minWidth: 650,\r\n    borderCollapse: \"separate\",\r\n  },\r\n  selectTableCell: {\r\n    width: 60,\r\n  },\r\n  tableCell: {\r\n    maxWidth: \"30vw\",\r\n    height: 40,\r\n    textAlign: \"center\",\r\n    fontSize: \"25px\",\r\n    \"&:hover\": {\r\n      color: \"black\",\r\n      backgroundColor: \"rgb(0, 0, 0, 0.1)\",\r\n    },\r\n  },\r\n  input: {\r\n    width: 130,\r\n    height: 40,\r\n  },\r\n  tableHeaderText: {\r\n    color: \"white\",\r\n    textAlign: \"center\",\r\n    borderBottom: \"none\",\r\n    fontSize: \"1.1em\",\r\n    border: \"1px solid white\",\r\n  },\r\n  tableHeaderEmpty: {\r\n    color: \"white\",\r\n    textAlign: \"center\",\r\n    borderBottom: \"none\",\r\n    fontSize: \"1.1em\",\r\n    borderRight: \"1px solid white\",\r\n    borderLeft: \"1px solid white\",\r\n  },\r\n}));\r\n\r\n// const createData = (\r\n//   batch,\r\n//   yearofEntry,\r\n//   bScCertificate,\r\n//   totalNewStudentsPerSemester,\r\n//   totalNewStudentsPerYear\r\n// ) => ({\r\n//   id: batch.replace(\" \", \"_\"),\r\n//   batch,\r\n//   yearofEntry,\r\n//   bScCertificate,\r\n//   totalNewStudentsPerSemester,\r\n//   totalNewStudentsPerYear,\r\n//   isEditMode: false,\r\n// });\r\n\r\nconst CustomTableCell = ({ row, name, onChange }) => {\r\n  const classes = useStyles();\r\n  const { isEditMode } = row;\r\n  return (\r\n    <TableCell align=\"left\" className={classes.tableCell}>\r\n      {isEditMode ? (\r\n        <Input\r\n          inputProps={{ min: 0, style: { textAlign: \"center\" } }}\r\n          value={row[name]}\r\n          name={name}\r\n          onChange={(e) => onChange(e, row)}\r\n          className={classes.input}\r\n        />\r\n      ) : (\r\n        row[name]\r\n      )}\r\n    </TableCell>\r\n  );\r\n};\r\n\r\nfunction EditableTable() {\r\n  const [rows, setRows] = React.useState([\r\n    {\r\n      id: 1,\r\n      yearOfEntry: \"S1 18/19\",\r\n      numberOfStudents: 60,\r\n      degreeSought: \"M. Sc.\",\r\n    },\r\n    {\r\n      id: 2,\r\n      yearOfEntry: \"S1 17/18\",\r\n      numberOfStudents: 100,\r\n      degreeSought: \"M. Sc.\",\r\n    },\r\n    {\r\n      id: 3,\r\n      yearOfEntry: \"S2 16/17\",\r\n      numberOfStudents: 99,\r\n      degreeSought: \"M. Sc.\",\r\n    },\r\n  ]);\r\n  const [previous, setPrevious] = React.useState({});\r\n  const classes = useStyles();\r\n\r\n  const onToggleEditMode = (id) => {\r\n    setRows((state) => {\r\n      return rows.map((row) => {\r\n        if (row.id === id) {\r\n          return { ...row, isEditMode: !row.isEditMode };\r\n        }\r\n        return row;\r\n      });\r\n    });\r\n  };\r\n\r\n  const onChange = (e, row) => {\r\n    if (!previous[row.id]) {\r\n      setPrevious((state) => ({ ...state, [row.id]: row }));\r\n    }\r\n    const value = e.target.value;\r\n    const name = e.target.name;\r\n    const { id } = row;\r\n    const newRows = rows.map((row) => {\r\n      if (row.id === id) {\r\n        return { ...row, [name]: value };\r\n      }\r\n      return row;\r\n    });\r\n    setRows(newRows);\r\n  };\r\n\r\n  const onRevert = (id) => {\r\n    const newRows = rows.map((row) => {\r\n      if (row.id === id) {\r\n        return previous[id] ? previous[id] : row;\r\n      }\r\n      return row;\r\n    });\r\n    setRows(newRows);\r\n    setPrevious((state) => {\r\n      delete state[id];\r\n      return state;\r\n    });\r\n    onToggleEditMode(id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AboveTableText headerText={\"Degree Awarded\"} />\r\n      <Paper className={classes.root}>\r\n        <Table className={classes.table} aria-label=\"caption table\">\r\n          <TableHead>\r\n            <TableRow style={{ backgroundColor: \"#AF0000\" }}>\r\n              <TableCell\r\n                className={classes.tableHeaderEmpty}\r\n                align=\"left\"\r\n              ></TableCell>\r\n              <TableCell className={classes.tableHeaderEmpty} align=\"left\">\r\n                Year of Graduation\r\n              </TableCell>\r\n              <TableCell className={classes.tableHeaderText} align=\"left\">\r\n                Number of Students\r\n              </TableCell>\r\n              <TableCell className={classes.tableHeaderText} align=\"left\">\r\n                Degree Sought\r\n              </TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {rows.map((row) => (\r\n              <TableRow key={row.id}>\r\n                <TableCell>*</TableCell>\r\n                <CustomTableCell {...{ row, name: \"yearOfEntry\", onChange }} />\r\n                <CustomTableCell\r\n                  {...{ row, name: \"numberOfStudents\", onChange }}\r\n                />\r\n                <CustomTableCell {...{ row, name: \"degreeSought\", onChange }} />\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n        {/*<Button variant=\"contained\" onClick={() => console.log(rows)}>\r\n        print state (TEST ONLY)\r\n                </Button>*/}\r\n      </Paper>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default EditableTable;\r\n","C:\\Users\\moonl\\apr\\src\\components\\Footer.jsx",["176","177","178","179","180","181"],"import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport footerLogo from \"../Assets/footer.png\";\r\nimport facebookLogo from \"../Assets/facebook.png\";\r\nimport linkedinLogo from \"../Assets/linkedin.png\";\r\nimport instaLogo from \"../Assets/instagram.png\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  copyRight: {\r\n    position: \"absolute\",\r\n    bottom: \"0\",\r\n    width: \"100%\",\r\n    height: \"26px\",\r\n    textAlign: \"center\",\r\n    color: \"white\",\r\n    borderTop: \"0.01em solid white\",\r\n    backgroundColor: \"#2a2b2e\",\r\n    fontSize: \"13px\",\r\n  },\r\n}));\r\n\r\nfunction Footer() {\r\n  const classes = useStyles();\r\n  return (\r\n    <React.Fragment>\r\n      <div\r\n        style={{\r\n          backgroundColor: \"#323336\",\r\n          height: \"230px\",\r\n          position: \"relative\",\r\n          marginTop: \"10%\",\r\n        }}\r\n      >\r\n        <div style={{ textAlign: \"center\", position: \"relative\" }}>\r\n          <img\r\n            src={footerLogo}\r\n            style={{\r\n              height: 80,\r\n              paddingTop: \"1vw\",\r\n            }}\r\n          />\r\n          <p style={{ color: \"white\" }}>\r\n            Get connected to us though our social media\r\n          </p>\r\n          <a\r\n            href=\"https://www.facebook.com/BUESoftwareProductionUnit\"\r\n            target=\"_blank\"\r\n          >\r\n            <img\r\n              src={facebookLogo}\r\n              style={{\r\n                height: 40,\r\n                paddingBottom: \"20px\",\r\n                paddingRight: \"1%\",\r\n              }}\r\n            />\r\n          </a>\r\n          <a\r\n            href=\"https://www.linkedin.com/company/bue-software-production-unit/\"\r\n            target=\"_blank\"\r\n          >\r\n            <img\r\n              src={linkedinLogo}\r\n              style={{\r\n                height: 40,\r\n                paddingBottom: \"20px\",\r\n                paddingRight: \"1%\",\r\n              }}\r\n            />\r\n          </a>\r\n\r\n          <img\r\n            src={instaLogo}\r\n            style={{\r\n              height: 40,\r\n              paddingBottom: \"20px\",\r\n            }}\r\n          />\r\n        </div>\r\n\r\n        <div className={classes.copyRight}>\r\n          Copyright @ 2020 Software Production Unit @ British Univeristy in\r\n          Egypt\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\nexport default Footer;\r\n","C:\\Users\\moonl\\apr\\src\\components\\Drawer.jsx",["182","183","184","185"],{"ruleId":"186","replacedBy":"187"},{"ruleId":"188","replacedBy":"189"},{"ruleId":"190","severity":1,"message":"191","line":5,"column":8,"nodeType":"192","messageId":"193","endLine":5,"endColumn":12},{"ruleId":"190","severity":1,"message":"194","line":11,"column":8,"nodeType":"192","messageId":"193","endLine":11,"endColumn":15},{"ruleId":"186","replacedBy":"195"},{"ruleId":"188","replacedBy":"196"},{"ruleId":"190","severity":1,"message":"197","line":184,"column":9,"nodeType":"192","messageId":"193","endLine":184,"endColumn":17},{"ruleId":"190","severity":1,"message":"197","line":154,"column":9,"nodeType":"192","messageId":"193","endLine":154,"endColumn":17},{"ruleId":"190","severity":1,"message":"197","line":162,"column":9,"nodeType":"192","messageId":"193","endLine":162,"endColumn":17},{"ruleId":"190","severity":1,"message":"197","line":146,"column":9,"nodeType":"192","messageId":"193","endLine":146,"endColumn":17},{"ruleId":"190","severity":1,"message":"197","line":146,"column":9,"nodeType":"192","messageId":"193","endLine":146,"endColumn":17},{"ruleId":"190","severity":1,"message":"197","line":143,"column":9,"nodeType":"192","messageId":"193","endLine":143,"endColumn":17},{"ruleId":"198","severity":1,"message":"199","line":34,"column":11,"nodeType":"200","endLine":40,"endColumn":13},{"ruleId":"201","severity":1,"message":"202","line":46,"column":13,"nodeType":"203","endLine":46,"endColumn":28},{"ruleId":"198","severity":1,"message":"199","line":48,"column":13,"nodeType":"200","endLine":55,"endColumn":15},{"ruleId":"201","severity":1,"message":"202","line":59,"column":13,"nodeType":"203","endLine":59,"endColumn":28},{"ruleId":"198","severity":1,"message":"199","line":61,"column":13,"nodeType":"200","endLine":68,"endColumn":15},{"ruleId":"198","severity":1,"message":"199","line":71,"column":11,"nodeType":"200","endLine":77,"endColumn":13},{"ruleId":"190","severity":1,"message":"204","line":2,"column":22,"nodeType":"192","messageId":"193","endLine":2,"endColumn":30},{"ruleId":"190","severity":1,"message":"205","line":35,"column":8,"nodeType":"192","messageId":"193","endLine":35,"endColumn":24},{"ruleId":"190","severity":1,"message":"206","line":120,"column":27,"nodeType":"192","messageId":"193","endLine":120,"endColumn":38},{"ruleId":"190","severity":1,"message":"207","line":126,"column":16,"nodeType":"192","messageId":"193","endLine":126,"endColumn":23},"no-native-reassign",["208"],"no-negated-in-lhs",["209"],"no-unused-vars","'Tabs' is defined but never used.","Identifier","unusedVar","'Divider' is defined but never used.",["208"],["209"],"'onRevert' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'useTheme' is defined but never used.","'ChevronRightIcon' is defined but never used.","'drawerWidth' is assigned a value but never used.","'setOpen' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]