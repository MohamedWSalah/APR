[{"C:\\Users\\moonl\\apr\\src\\index.js":"1","C:\\Users\\moonl\\apr\\src\\App.js":"2","C:\\Users\\moonl\\apr\\src\\reportWebVitals.js":"3","C:\\Users\\moonl\\apr\\src\\components\\Body.jsx":"4","C:\\Users\\moonl\\apr\\src\\components\\Tabs.jsx":"5","C:\\Users\\moonl\\apr\\src\\components\\DropDownMenu.jsx":"6","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\EnglishLanguageLevels\\EnglishLanguageLevels.jsx":"7","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\EntryForTheAYsF\\EntryForTheAYs.jsx":"8","C:\\Users\\moonl\\apr\\src\\components\\AboveTableText.jsx":"9","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\EntryForTheAYsF\\EntryTableUI.jsx":"10","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\EnglishLanguageLevels\\EnglishTableUI.jsx":"11","C:\\Users\\moonl\\apr\\src\\components\\Header\\HeaderTest.jsx":"12","C:\\Users\\moonl\\apr\\src\\components\\Header\\Header.jsx":"13","C:\\Users\\moonl\\apr\\src\\components\\Header\\AppBarCollapse.js":"14","C:\\Users\\moonl\\apr\\src\\components\\Header\\ButtonAppBarCollapse.js":"15","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\StaffStudentComMeetings\\StaffStudentComMeetings.jsx":"16","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\ReuseableTable.jsx":"17","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\ProgramFeedback\\ProgramFeedback.jsx":"18","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\TeachingStaff\\TeachingStaff.jsx":"19","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\LSBULinkTutorReports\\LSBULinkTutorReports.jsx":"20","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\ReviewOfAssessments\\ReviewOfAssessments.jsx":"21","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\ExternalExaminerReport\\ExternalExaminerReport.jsx":"22","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\ModuleSpecifications\\ModuleSpecifications.jsx":"23","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\StaffBreakDownForTheCurrentAY\\StaffBreakDownForTheCurrentAY.jsx":"24","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\StaffBreakDownForTheCurrentAY\\StaffBreakDownTableUI.jsx":"25","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\StudentProfileAndMarketing\\StudentProfileAndMarketing.jsx":"26","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\StudentProfileAndMarketing\\StudentProfileTableUI.jsx":"27","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\SupportingDocumentation\\SupportingDocumentation.jsx":"28","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\SupportingDocumentation\\SupDocTableUI.jsx":"29","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\ProgramBoardDecisions\\PBDMain.jsx":"30","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\ProgramBoardDecisions\\PBDTables\\CoreModulesTable.jsx":"31","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\ProgramBoardDecisions\\PBDTables\\SummaryProbationPeriod.jsx":"32","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\ProgramBoardDecisions\\PBDTables\\ProgressionThesisProposal.jsx":"33","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\ProgramBoardDecisions\\PBDTables\\VoluntaryWithdrawls.jsx":"34","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\ProgramBoardDecisions\\PBDTables\\ExpectedToGraduate.jsx":"35","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\ProgramBoardDecisions\\PBDTables\\DegreeAwarded.jsx":"36","C:\\Users\\moonl\\apr\\src\\components\\Footer.jsx":"37","C:\\Users\\moonl\\apr\\src\\components\\Drawer.jsx":"38","C:\\Users\\moonl\\apr\\src\\components\\Login\\Login.jsx":"39","C:\\Users\\moonl\\apr\\src\\components\\NotFound.jsx":"40"},{"size":298,"mtime":1607252242154,"results":"41","hashOfConfig":"42"},{"size":1203,"mtime":1608625695868,"results":"43","hashOfConfig":"42"},{"size":362,"mtime":499162500000,"results":"44","hashOfConfig":"42"},{"size":3236,"mtime":1608624495282,"results":"45","hashOfConfig":"42"},{"size":5400,"mtime":1607587913546,"results":"46","hashOfConfig":"42"},{"size":638,"mtime":1607936917951,"results":"47","hashOfConfig":"42"},{"size":1087,"mtime":1607334442823,"results":"48","hashOfConfig":"42"},{"size":1038,"mtime":1607520944863,"results":"49","hashOfConfig":"42"},{"size":515,"mtime":1607864455942,"results":"50","hashOfConfig":"42"},{"size":10097,"mtime":1608122450902,"results":"51","hashOfConfig":"42"},{"size":7353,"mtime":1607935919807,"results":"52","hashOfConfig":"42"},{"size":2228,"mtime":1608627822338,"results":"53","hashOfConfig":"42"},{"size":6240,"mtime":1607337340455,"results":"54","hashOfConfig":"42"},{"size":1491,"mtime":1608627789649,"results":"55","hashOfConfig":"42"},{"size":1559,"mtime":1607338887319,"results":"56","hashOfConfig":"42"},{"size":782,"mtime":1607425606976,"results":"57","hashOfConfig":"42"},{"size":6186,"mtime":1608022876895,"results":"58","hashOfConfig":"42"},{"size":1081,"mtime":1607426353465,"results":"59","hashOfConfig":"42"},{"size":820,"mtime":1607426387951,"results":"60","hashOfConfig":"42"},{"size":864,"mtime":1607426669490,"results":"61","hashOfConfig":"42"},{"size":904,"mtime":1607428038366,"results":"62","hashOfConfig":"42"},{"size":596,"mtime":1607430142914,"results":"63","hashOfConfig":"42"},{"size":842,"mtime":1607430339387,"results":"64","hashOfConfig":"42"},{"size":710,"mtime":1607864386541,"results":"65","hashOfConfig":"42"},{"size":5824,"mtime":1607936810274,"results":"66","hashOfConfig":"42"},{"size":600,"mtime":1607503794846,"results":"67","hashOfConfig":"42"},{"size":5344,"mtime":1607936823156,"results":"68","hashOfConfig":"42"},{"size":971,"mtime":1607506085229,"results":"69","hashOfConfig":"42"},{"size":5597,"mtime":1607936864949,"results":"70","hashOfConfig":"42"},{"size":3546,"mtime":1607859780683,"results":"71","hashOfConfig":"42"},{"size":9690,"mtime":1608035128885,"results":"72","hashOfConfig":"42"},{"size":8468,"mtime":1608035295337,"results":"73","hashOfConfig":"42"},{"size":7129,"mtime":1608035281231,"results":"74","hashOfConfig":"42"},{"size":5695,"mtime":1608035315583,"results":"75","hashOfConfig":"42"},{"size":5511,"mtime":1608035259398,"results":"76","hashOfConfig":"42"},{"size":5337,"mtime":1608035246907,"results":"77","hashOfConfig":"42"},{"size":2334,"mtime":1607862234904,"results":"78","hashOfConfig":"42"},{"size":10043,"mtime":1608548767801,"results":"79","hashOfConfig":"42"},{"size":4302,"mtime":1608625185864,"results":"80","hashOfConfig":"42"},{"size":134,"mtime":1608625746733,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},"1carsaz",{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"84"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"84"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"84"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"84"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"84"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"84"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"84"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"84"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"84"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\moonl\\apr\\src\\index.js",[],["173","174"],"C:\\Users\\moonl\\apr\\src\\App.js",["175","176"],"C:\\Users\\moonl\\apr\\src\\reportWebVitals.js",[],"C:\\Users\\moonl\\apr\\src\\components\\Body.jsx",["177"],"C:\\Users\\moonl\\apr\\src\\components\\Tabs.jsx",[],"C:\\Users\\moonl\\apr\\src\\components\\DropDownMenu.jsx",[],"C:\\Users\\moonl\\apr\\src\\components\\Tabels\\EnglishLanguageLevels\\EnglishLanguageLevels.jsx",[],"C:\\Users\\moonl\\apr\\src\\components\\Tabels\\EntryForTheAYsF\\EntryForTheAYs.jsx",[],"C:\\Users\\moonl\\apr\\src\\components\\AboveTableText.jsx",[],"C:\\Users\\moonl\\apr\\src\\components\\Tabels\\EntryForTheAYsF\\EntryTableUI.jsx",["178"],"import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n// Icons\r\nimport EditIcon from \"@material-ui/icons/EditOutlined\";\r\nimport DoneIcon from \"@material-ui/icons/DoneAllTwoTone\";\r\nimport RevertIcon from \"@material-ui/icons/NotInterestedOutlined\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    marginTop: theme.spacing(3),\r\n    overflowX: \"auto\",\r\n  },\r\n  table: {\r\n    minWidth: 650,\r\n    borderCollapse: \"separate\",\r\n  },\r\n  selectTableCell: {\r\n    width: 60,\r\n  },\r\n  tableCell: {\r\n    maxWidth: \"30vw\",\r\n    height: 40,\r\n    textAlign: \"center\",\r\n    fontSize: \"25px\",\r\n    \"&:hover\": {\r\n      color: \"black\",\r\n      backgroundColor: \"rgb(0, 0, 0, 0.1)\",\r\n    },\r\n  },\r\n  input: {\r\n    width: 130,\r\n    height: 40,\r\n  },\r\n  tableHeaderText: {\r\n    color: \"white\",\r\n    textAlign: \"center\",\r\n    borderBottom: \"none\",\r\n    fontSize: \"1.1em\",\r\n    border: \"1px solid white\",\r\n  },\r\n  tableHeaderEmpty: {\r\n    color: \"white\",\r\n    textAlign: \"center\",\r\n    borderBottom: \"none\",\r\n    fontSize: \"1.1em\",\r\n    borderRight: \"1px solid white\",\r\n    borderLeft: \"1px solid white\",\r\n  },\r\n}));\r\n\r\n// const createData = (\r\n//   batch,\r\n//   yearofEntry,\r\n//   bScCertificate,\r\n//   totalNewStudentsPerSemester,\r\n//   totalNewStudentsPerYear\r\n// ) => ({\r\n//   id: batch.replace(\" \", \"_\"),\r\n//   batch,\r\n//   yearofEntry,\r\n//   bScCertificate,\r\n//   totalNewStudentsPerSemester,\r\n//   totalNewStudentsPerYear,\r\n//   isEditMode: false,\r\n// });\r\n\r\nconst CustomTableCell = ({ row, name, onChange }) => {\r\n  const classes = useStyles();\r\n  const { isEditMode } = row;\r\n  return (\r\n    <TableCell align=\"left\" className={classes.tableCell}>\r\n      {isEditMode ? (\r\n        <Input\r\n          inputProps={{ min: 0, style: { textAlign: \"center\" } }}\r\n          value={row[name]}\r\n          name={name}\r\n          onChange={(e) => onChange(e, row)}\r\n          className={classes.input}\r\n        />\r\n      ) : (\r\n        row[name]\r\n      )}\r\n    </TableCell>\r\n  );\r\n};\r\n\r\nconst CustomTableCellTest = ({ row, name, name2, onChange }) => {\r\n  const classes = useStyles();\r\n  const { isEditMode } = row;\r\n  return (\r\n    <TableCell align=\"left\" className={classes.tableCell}>\r\n      {isEditMode ? (\r\n        <>\r\n          <Input\r\n            inputProps={{ min: 0, style: { textAlign: \"center\" } }}\r\n            value={row[name]}\r\n            name={name}\r\n            onChange={(e) => onChange(e, row)}\r\n            className={classes.input}\r\n          />\r\n          <Input\r\n            inputProps={{ min: 0, style: { textAlign: \"center\" } }}\r\n            value={row[name2]}\r\n            name={name2}\r\n            onChange={(e) => onChange(e, row)}\r\n            className={classes.input}\r\n          />\r\n        </>\r\n      ) : (\r\n        <>\r\n          <>{row[name]}</> <br></br> <>{row[name2]}</>\r\n        </>\r\n      )}\r\n    </TableCell>\r\n  );\r\n};\r\n\r\nfunction EditableTable() {\r\n  const [rows, setRows] = React.useState([\r\n    {\r\n      id: 1,\r\n      batch: \"1\",\r\n      yearOfEntry: \"19/20\",\r\n      yearOfEntry2: \"19/20\",\r\n      BUE: \"1\",\r\n      BUE2: \"1\",\r\n      NonBUE: \"0\",\r\n      NonBUE2: \"0\",\r\n      totalNewStudentsPerSemester: 15,\r\n      totalNewStudentsPerSemester2: 15,\r\n      totalStudentsPerYear: 5,\r\n      totalStudentsPerYear2: 5,\r\n    },\r\n    {\r\n      id: 2,\r\n      batch: \"2\",\r\n      yearOfEntry: \"18/19\",\r\n      yearOfEntry2: \"18/19\",\r\n      BUE: \"9\",\r\n      BUE2: \"9\",\r\n      NonBUE: \"2\",\r\n      NonBUE2: \"2\",\r\n      totalNewStudentsPerSemester: 10,\r\n      totalNewStudentsPerSemester2: 10,\r\n      totalStudentsPerYear: 5,\r\n      totalStudentsPerYear2: 5,\r\n    },\r\n    {\r\n      id: 3,\r\n      batch: \"3\",\r\n      yearOfEntry: \"17/18\",\r\n      yearOfEntry2: \"17/18\",\r\n      BUE: \"4\",\r\n      BUE2: \"4\",\r\n      NonBUE: \"1\",\r\n      NonBUE2: \"1\",\r\n      totalNewStudentsPerSemester: 3,\r\n      totalNewStudentsPerSemester2: 3,\r\n      totalStudentsPerYear: 2,\r\n      totalStudentsPerYear2: 2,\r\n    },\r\n    {\r\n      id: 4,\r\n      batch: \"4\",\r\n      yearOfEntry: \"16/17\",\r\n      yearOfEntry2: \"16/17\",\r\n      BUE: \"7\",\r\n      BUE2: \"7\",\r\n      NonBUE: \"0\",\r\n      NonBUE2: \"0\",\r\n      totalNewStudentsPerSemester: 15,\r\n      totalNewStudentsPerSemester2: 15,\r\n      totalStudentsPerYear: 6,\r\n      totalStudentsPerYear2: 6,\r\n    },\r\n  ]);\r\n  const [previous, setPrevious] = React.useState({});\r\n  const classes = useStyles();\r\n\r\n  const onToggleEditMode = (id) => {\r\n    setRows((state) => {\r\n      return rows.map((row) => {\r\n        if (row.id === id) {\r\n          return { ...row, isEditMode: !row.isEditMode };\r\n        }\r\n        return row;\r\n      });\r\n    });\r\n  };\r\n\r\n  const onChange = (e, row) => {\r\n    if (!previous[row.id]) {\r\n      setPrevious((state) => ({ ...state, [row.id]: row }));\r\n    }\r\n    const value = e.target.value;\r\n    const name = e.target.name;\r\n    const { id } = row;\r\n    const newRows = rows.map((row) => {\r\n      if (row.id === id) {\r\n        return { ...row, [name]: value };\r\n      }\r\n      return row;\r\n    });\r\n    setRows(newRows);\r\n  };\r\n\r\n  const onRevert = (id) => {\r\n    const newRows = rows.map((row) => {\r\n      if (row.id === id) {\r\n        return previous[id] ? previous[id] : row;\r\n      }\r\n      return row;\r\n    });\r\n    setRows(newRows);\r\n    setPrevious((state) => {\r\n      delete state[id];\r\n      return state;\r\n    });\r\n    onToggleEditMode(id);\r\n  };\r\n\r\n  return (\r\n    <Paper className={classes.root}>\r\n      <Table className={classes.table} aria-label=\"caption table\">\r\n        <TableHead>\r\n          <TableRow style={{ backgroundColor: \"#AF0000\" }}>\r\n            <TableCell className={classes.tableHeaderText} align=\"left\" />\r\n            <TableCell\r\n              className={classes.tableHeaderText}\r\n              align=\"left\"\r\n              style={{ paddingBottom: \"10px\" }}\r\n            ></TableCell>\r\n            <TableCell\r\n              className={classes.tableHeaderText}\r\n              align=\"left\"\r\n            ></TableCell>\r\n            <TableCell\r\n              colSpan={2}\r\n              className={classes.tableHeaderText}\r\n              align=\"left\"\r\n            >\r\n              B. Sc Certificate\r\n            </TableCell>\r\n\r\n            <TableCell\r\n              className={classes.tableHeaderText}\r\n              align=\"left\"\r\n            ></TableCell>\r\n            <TableCell\r\n              className={classes.tableHeaderText}\r\n              align=\"left\"\r\n            ></TableCell>\r\n          </TableRow>\r\n\r\n          <TableRow style={{ backgroundColor: \"#AF0000\" }}>\r\n            <TableCell\r\n              className={classes.tableHeaderEmpty}\r\n              align=\"left\"\r\n            ></TableCell>\r\n            <TableCell className={classes.tableHeaderEmpty} align=\"left\">\r\n              Batch\r\n            </TableCell>\r\n            <TableCell className={classes.tableHeaderEmpty} align=\"left\">\r\n              Year of Entry\r\n            </TableCell>\r\n            <TableCell className={classes.tableHeaderText} align=\"left\">\r\n              BUE\r\n            </TableCell>\r\n            <TableCell className={classes.tableHeaderText} align=\"left\">\r\n              NonBUE\r\n            </TableCell>\r\n            <TableCell className={classes.tableHeaderEmpty} align=\"left\">\r\n              Total New Students/Semester\r\n            </TableCell>\r\n            <TableCell className={classes.tableHeaderEmpty} align=\"left\">\r\n              Total Students/Year\r\n            </TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {rows.map((row) => (\r\n            <TableRow key={row.id}>\r\n              <TableCell className={classes.selectTableCell}>\r\n                {row.isEditMode ? (\r\n                  <>\r\n                    <IconButton\r\n                      aria-label=\"done\"\r\n                      onClick={() => onToggleEditMode(row.id)}\r\n                    >\r\n                      <DoneIcon />\r\n                    </IconButton>\r\n                    <IconButton\r\n                      aria-label=\"revert\"\r\n                      onClick={() => onRevert(row.id)}\r\n                    >\r\n                      <RevertIcon />\r\n                    </IconButton>\r\n                  </>\r\n                ) : (\r\n                  <IconButton\r\n                    aria-label=\"delete\"\r\n                    onClick={() => onToggleEditMode(row.id)}\r\n                  >\r\n                    <EditIcon />\r\n                  </IconButton>\r\n                )}\r\n              </TableCell>\r\n\r\n              <CustomTableCell {...{ row, name: \"batch\", onChange }} />\r\n\r\n              <CustomTableCellTest\r\n                {...{\r\n                  row,\r\n                  name: \"yearOfEntry\",\r\n                  name2: \"yearOfEntry2\",\r\n                  onChange,\r\n                }}\r\n              />\r\n              <CustomTableCellTest\r\n                {...{ row, name: \"BUE\", name2: \"BUE2\", onChange }}\r\n              />\r\n              <CustomTableCellTest\r\n                {...{ row, name: \"NonBUE\", name2: \"NonBUE2\", onChange }}\r\n              />\r\n              <CustomTableCellTest\r\n                {...{\r\n                  row,\r\n                  name: \"totalNewStudentsPerSemester\",\r\n                  name2: \"totalNewStudentsPerSemester2\",\r\n                  onChange,\r\n                }}\r\n              />\r\n              <CustomTableCellTest\r\n                {...{\r\n                  row,\r\n                  name: \"totalStudentsPerYear\",\r\n                  name2: \"totalStudentsPerYear2\",\r\n                  onChange,\r\n                }}\r\n              />\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </Paper>\r\n  );\r\n}\r\n\r\nexport default EditableTable;\r\n","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\EnglishLanguageLevels\\EnglishTableUI.jsx",[],"C:\\Users\\moonl\\apr\\src\\components\\Header\\HeaderTest.jsx",[],"C:\\Users\\moonl\\apr\\src\\components\\Header\\Header.jsx",[],["179","180"],"C:\\Users\\moonl\\apr\\src\\components\\Header\\AppBarCollapse.js",[],"C:\\Users\\moonl\\apr\\src\\components\\Header\\ButtonAppBarCollapse.js",[],"C:\\Users\\moonl\\apr\\src\\components\\Tabels\\StaffStudentComMeetings\\StaffStudentComMeetings.jsx",[],"C:\\Users\\moonl\\apr\\src\\components\\Tabels\\ReuseableTable.jsx",[],"C:\\Users\\moonl\\apr\\src\\components\\Tabels\\ProgramFeedback\\ProgramFeedback.jsx",[],"C:\\Users\\moonl\\apr\\src\\components\\Tabels\\TeachingStaff\\TeachingStaff.jsx",[],"C:\\Users\\moonl\\apr\\src\\components\\Tabels\\LSBULinkTutorReports\\LSBULinkTutorReports.jsx",[],"C:\\Users\\moonl\\apr\\src\\components\\Tabels\\ReviewOfAssessments\\ReviewOfAssessments.jsx",[],"C:\\Users\\moonl\\apr\\src\\components\\Tabels\\ExternalExaminerReport\\ExternalExaminerReport.jsx",[],"C:\\Users\\moonl\\apr\\src\\components\\Tabels\\ModuleSpecifications\\ModuleSpecifications.jsx",[],"C:\\Users\\moonl\\apr\\src\\components\\Tabels\\StaffBreakDownForTheCurrentAY\\StaffBreakDownForTheCurrentAY.jsx",[],"C:\\Users\\moonl\\apr\\src\\components\\Tabels\\StaffBreakDownForTheCurrentAY\\StaffBreakDownTableUI.jsx",[],"C:\\Users\\moonl\\apr\\src\\components\\Tabels\\StudentProfileAndMarketing\\StudentProfileAndMarketing.jsx",[],"C:\\Users\\moonl\\apr\\src\\components\\Tabels\\StudentProfileAndMarketing\\StudentProfileTableUI.jsx",[],"C:\\Users\\moonl\\apr\\src\\components\\Tabels\\SupportingDocumentation\\SupportingDocumentation.jsx",[],"C:\\Users\\moonl\\apr\\src\\components\\Tabels\\SupportingDocumentation\\SupDocTableUI.jsx",[],"C:\\Users\\moonl\\apr\\src\\components\\Tabels\\ProgramBoardDecisions\\PBDMain.jsx",[],"C:\\Users\\moonl\\apr\\src\\components\\Tabels\\ProgramBoardDecisions\\PBDTables\\CoreModulesTable.jsx",["181"],"import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport AboveTableText from \"../../../AboveTableText\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    marginTop: theme.spacing(3),\r\n    overflowX: \"auto\",\r\n  },\r\n  table: {\r\n    minWidth: 650,\r\n    borderCollapse: \"separate\",\r\n  },\r\n  selectTableCell: {\r\n    width: 60,\r\n  },\r\n  tableCell: {\r\n    maxWidth: \"30vw\",\r\n    height: 40,\r\n    textAlign: \"center\",\r\n    fontSize: \"25px\",\r\n    \"&:hover\": {\r\n      color: \"black\",\r\n      backgroundColor: \"rgb(0, 0, 0, 0.1)\",\r\n    },\r\n  },\r\n  input: {\r\n    width: 130,\r\n    height: 40,\r\n    fontSize: \"25px\",\r\n  },\r\n  tableHeaderText: {\r\n    color: \"white\",\r\n    textAlign: \"center\",\r\n    borderBottom: \"none\",\r\n    fontSize: \"1.1em\",\r\n    border: \"1px solid white\",\r\n  },\r\n  tableHeaderEmpty: {\r\n    color: \"white\",\r\n    textAlign: \"center\",\r\n    borderBottom: \"none\",\r\n    fontSize: \"1.1em\",\r\n    borderRight: \"1px solid white\",\r\n    borderLeft: \"1px solid white\",\r\n  },\r\n}));\r\n\r\nconst CustomTableCell = ({ row, name, totalStud, onChange }) => {\r\n  const classes = useStyles();\r\n  const { isEditMode } = row;\r\n  const percentage = ((row[name] * 100) / row[totalStud]).toFixed(1);\r\n  return (\r\n    <TableCell align=\"left\" className={classes.tableCell}>\r\n      {isEditMode ? (\r\n        <Input\r\n          inputProps={{ min: 0, style: { textAlign: \"center\" } }}\r\n          value={row[name]}\r\n          name={name}\r\n          onChange={(e) => onChange(e, row)}\r\n          className={classes.input}\r\n        />\r\n      ) : (\r\n        <>{totalStud ? row[name] + `\\n (${percentage}%)` : row[name]}</>\r\n      )}\r\n    </TableCell>\r\n  );\r\n};\r\nlet semesterOneCols = 0;\r\nlet semesterTwoCols = 0;\r\nconst SemesterModulesNumber = (rows) => {\r\n  semesterOneCols = 0;\r\n  semesterTwoCols = 0;\r\n  rows.forEach(function (Item) {\r\n    Item.semester === 1 ? semesterOneCols++ : semesterTwoCols++;\r\n  });\r\n};\r\n\r\nfunction EditableTable(props) {\r\n  const [rows, setRows] = React.useState([\r\n    {\r\n      id: 1,\r\n      semester: 1,\r\n      module: \"Intro to Web Science\",\r\n      totalNumberOfStudents: 12,\r\n      studentsFirstAttempt: 12,\r\n      studentsSecondAttempt: \"10\",\r\n      studentPassImprove: \"1\",\r\n    },\r\n    {\r\n      id: 2,\r\n      semester: 1,\r\n      module: \"Service Oriented SE\",\r\n      totalNumberOfStudents: 14,\r\n      studentsFirstAttempt: \"2\",\r\n      studentsSecondAttempt: \"10\",\r\n      studentPassImprove: \"1\",\r\n    },\r\n    {\r\n      id: 3,\r\n      semester: 1,\r\n      module: \"Web Modeling\",\r\n      totalNumberOfStudents: 15,\r\n      studentsFirstAttempt: \"4\",\r\n      studentsSecondAttempt: \"10\",\r\n      studentPassImprove: \"1\",\r\n    },\r\n    {\r\n      id: 5,\r\n      semester: 1,\r\n      module: \"Data Science\",\r\n      totalNumberOfStudents: 999,\r\n      studentsFirstAttempt: \"2\",\r\n      studentsSecondAttempt: \"10\",\r\n      studentPassImprove: \"1\",\r\n    },\r\n    {\r\n      id: 4,\r\n      semester: 2,\r\n      module: \"Web Topologies\",\r\n      totalNumberOfStudents: 16,\r\n      studentsFirstAttempt: \"9\",\r\n      studentsSecondAttempt: \"10\",\r\n      studentPassImprove: \"1\",\r\n    },\r\n    {\r\n      id: 5,\r\n      semester: 2,\r\n      module: \"Data Science\",\r\n      totalNumberOfStudents: 999,\r\n      studentsFirstAttempt: \"2\",\r\n      studentsSecondAttempt: \"10\",\r\n      studentPassImprove: \"1\",\r\n    },\r\n    {\r\n      id: 5,\r\n      semester: 2,\r\n      module: \"Data Science\",\r\n      totalNumberOfStudents: 999,\r\n      studentsFirstAttempt: \"2\",\r\n      studentsSecondAttempt: \"10\",\r\n      studentPassImprove: \"1\",\r\n    },\r\n  ]);\r\n  SemesterModulesNumber(rows);\r\n  const [previous, setPrevious] = React.useState({});\r\n  const classes = useStyles();\r\n\r\n  const onToggleEditMode = (id) => {\r\n    setRows((state) => {\r\n      return rows.map((row) => {\r\n        if (row.id === id) {\r\n          return { ...row, isEditMode: !row.isEditMode };\r\n        }\r\n        return row;\r\n      });\r\n    });\r\n  };\r\n\r\n  const onChange = (e, row) => {\r\n    if (!previous[row.id]) {\r\n      setPrevious((state) => ({ ...state, [row.id]: row }));\r\n    }\r\n    const value = e.target.value;\r\n    const name = e.target.name;\r\n    const { id } = row;\r\n    const newRows = rows.map((row) => {\r\n      if (row.id === id) {\r\n        return { ...row, [name]: value };\r\n      }\r\n      return row;\r\n    });\r\n    setRows(newRows);\r\n  };\r\n\r\n  const onRevert = (id) => {\r\n    const newRows = rows.map((row) => {\r\n      if (row.id === id) {\r\n        return previous[id] ? previous[id] : row;\r\n      }\r\n      return row;\r\n    });\r\n    setRows(newRows);\r\n    setPrevious((state) => {\r\n      delete state[id];\r\n      return state;\r\n    });\r\n    onToggleEditMode(id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AboveTableText headerText={\"Core modules\"} />\r\n      <Paper className={classes.root}>\r\n        <Table className={classes.table} aria-label=\"caption table\">\r\n          <TableHead>\r\n            <TableRow style={{ backgroundColor: \"#AF0000\" }}>\r\n              <TableCell className={classes.tableHeaderText} align=\"left\" />\r\n              <TableCell\r\n                className={classes.tableHeaderText}\r\n                align=\"left\"\r\n                style={{ paddingBottom: \"10px\" }}\r\n                colSpan={2}\r\n              ></TableCell>\r\n              <TableCell\r\n                className={classes.tableHeaderText}\r\n                align=\"left\"\r\n                colSpan={semesterOneCols}\r\n              >\r\n                Semester 1\r\n              </TableCell>\r\n              <TableCell\r\n                colSpan={semesterTwoCols}\r\n                className={classes.tableHeaderText}\r\n                align=\"left\"\r\n              >\r\n                Semester 2\r\n              </TableCell>\r\n            </TableRow>\r\n\r\n            <TableRow style={{ backgroundColor: \"#AF0000\" }}>\r\n              <TableCell\r\n                className={classes.tableHeaderEmpty}\r\n                align=\"left\"\r\n              ></TableCell>\r\n              <TableCell\r\n                colSpan={2}\r\n                rowSpan={2}\r\n                className={classes.tableHeaderEmpty}\r\n                align=\"left\"\r\n              >\r\n                Module Code and Title\r\n              </TableCell>\r\n              {rows.map((row) => (\r\n                <TableCell className={classes.tableHeaderText} align=\"left\">\r\n                  {row.module}\r\n                </TableCell>\r\n              ))}\r\n            </TableRow>\r\n          </TableHead>\r\n\r\n          <TableBody>\r\n            <TableRow>\r\n              <TableCell>1</TableCell>\r\n              <TableCell\r\n                colSpan={2}\r\n                style={{ fontWeight: \"bold\", fontSize: \"20px\" }}\r\n              >\r\n                Total Number of Students\r\n              </TableCell>\r\n              {rows.map((row) => (\r\n                <CustomTableCell\r\n                  {...{ row, name: \"totalNumberOfStudents\", onChange }}\r\n                />\r\n              ))}\r\n            </TableRow>\r\n\r\n            <TableRow>\r\n              <TableCell>1</TableCell>\r\n              <TableCell style={{ fontWeight: \"bold\", fontSize: \"18px\" }}>\r\n                Pass at first Attempt\r\n              </TableCell>\r\n              <TableCell>\r\n                <TableRow style={{ fontSize: \"18px\" }}>Students</TableRow>\r\n                <TableRow style={{ fontSize: \"18px\" }}>Percentage</TableRow>\r\n              </TableCell>\r\n              {rows.map((row) => (\r\n                <CustomTableCell\r\n                  {...{\r\n                    row,\r\n                    name: \"studentsFirstAttempt\",\r\n                    totalStud: \"totalNumberOfStudents\",\r\n                    onChange,\r\n                  }}\r\n                />\r\n              ))}\r\n            </TableRow>\r\n\r\n            <TableRow>\r\n              <TableCell>1</TableCell>\r\n              <TableCell style={{ fontWeight: \"bold\", fontSize: \"18px\" }}>\r\n                Pass at Second Attempt\r\n              </TableCell>\r\n              <TableCell>\r\n                <TableRow style={{ fontSize: \"18px\" }}>Students</TableRow>\r\n                <TableRow style={{ fontSize: \"18px\" }}>Percentage</TableRow>\r\n              </TableCell>\r\n              {rows.map((row) => (\r\n                <CustomTableCell\r\n                  {...{\r\n                    row,\r\n                    name: \"studentsSecondAttempt\",\r\n                    totalStud: \"totalNumberOfStudents\",\r\n                    onChange,\r\n                  }}\r\n                />\r\n              ))}\r\n            </TableRow>\r\n\r\n            <TableRow>\r\n              <TableCell>1</TableCell>\r\n              <TableCell style={{ fontWeight: \"bold\", fontSize: \"18px\" }}>\r\n                Pass at second attempt in order to improve GPA\r\n              </TableCell>\r\n              <TableCell>\r\n                <TableRow style={{ fontSize: \"18px\" }}>Students</TableRow>\r\n                <TableRow style={{ fontSize: \"18px\" }}>Percentage</TableRow>\r\n              </TableCell>\r\n              {rows.map((row) => (\r\n                <CustomTableCell\r\n                  {...{\r\n                    row,\r\n                    name: \"studentPassImprove\",\r\n                    totalStud: \"totalNumberOfStudents\",\r\n                    onChange,\r\n                  }}\r\n                />\r\n              ))}\r\n            </TableRow>\r\n          </TableBody>\r\n        </Table>\r\n      </Paper>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default EditableTable;\r\n","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\ProgramBoardDecisions\\PBDTables\\SummaryProbationPeriod.jsx",["182"],"import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport AboveTableText from \"../../../AboveTableText\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    marginTop: theme.spacing(3),\r\n    overflowX: \"auto\",\r\n  },\r\n  table: {\r\n    minWidth: 650,\r\n    borderCollapse: \"separate\",\r\n  },\r\n  selectTableCell: {\r\n    width: 60,\r\n  },\r\n  tableCell: {\r\n    maxWidth: \"30vw\",\r\n    height: 40,\r\n    textAlign: \"center\",\r\n    fontSize: \"25px\",\r\n    \"&:hover\": {\r\n      color: \"black\",\r\n      backgroundColor: \"rgb(0, 0, 0, 0.1)\",\r\n    },\r\n  },\r\n  input: {\r\n    width: 130,\r\n    height: 40,\r\n    fontSize: \"25px\",\r\n  },\r\n  tableHeaderText: {\r\n    color: \"white\",\r\n    textAlign: \"center\",\r\n    borderBottom: \"none\",\r\n    fontSize: \"1.1em\",\r\n    border: \"1px solid white\",\r\n  },\r\n  tableHeaderEmpty: {\r\n    color: \"white\",\r\n    textAlign: \"center\",\r\n    borderBottom: \"none\",\r\n    fontSize: \"1.1em\",\r\n    borderRight: \"1px solid white\",\r\n    borderLeft: \"1px solid white\",\r\n  },\r\n}));\r\n\r\n// const createData = (\r\n//   batch,\r\n//   yearofEntry,\r\n//   bScCertificate,\r\n//   totalNewStudentsPerSemester,\r\n//   totalNewStudentsPerYear\r\n// ) => ({\r\n//   id: batch.replace(\" \", \"_\"),\r\n//   batch,\r\n//   yearofEntry,\r\n//   bScCertificate,\r\n//   totalNewStudentsPerSemester,\r\n//   totalNewStudentsPerYear,\r\n//   isEditMode: false,\r\n// });\r\n\r\nconst CustomTableCell = ({ row, name, totalStud, onChange }) => {\r\n  const classes = useStyles();\r\n  const { isEditMode } = row;\r\n  const percentage = ((row[name] * 100) / row[totalStud]).toFixed(1);\r\n  return (\r\n    <TableCell align=\"left\" className={classes.tableCell}>\r\n      {isEditMode ? (\r\n        <Input\r\n          inputProps={{ min: 0, style: { textAlign: \"center\" } }}\r\n          value={row[name]}\r\n          name={name}\r\n          onChange={(e) => onChange(e, row)}\r\n          className={classes.input}\r\n        />\r\n      ) : (\r\n        <>{totalStud ? row[name] + `\\n (${percentage}%)` : row[name]}</>\r\n      )}\r\n    </TableCell>\r\n  );\r\n};\r\n\r\nfunction EditableTable() {\r\n  const [rows, setRows] = React.useState([\r\n    {\r\n      id: 1,\r\n      totalNumberOfStudents: 100,\r\n      entryStudents: 20,\r\n      continued: 10,\r\n      enhancingModules: 20,\r\n      repeatingModules: 5,\r\n      totalProgressingToThesis: 9,\r\n    },\r\n    {\r\n      id: 2,\r\n      totalNumberOfStudents: 70,\r\n      entryStudents: 5,\r\n      continued: 9,\r\n      enhancingModules: 2,\r\n      repeatingModules: 5,\r\n      totalProgressingToThesis: 7,\r\n    },\r\n    {\r\n      id: 3,\r\n      totalNumberOfStudents: 50,\r\n      entryStudents: 9,\r\n      continued: 6,\r\n      enhancingModules: 7,\r\n      repeatingModules: 5,\r\n      totalProgressingToThesis: 3,\r\n    },\r\n  ]);\r\n  const [previous, setPrevious] = React.useState({});\r\n  const classes = useStyles();\r\n\r\n  const onToggleEditMode = (id) => {\r\n    setRows((state) => {\r\n      return rows.map((row) => {\r\n        if (row.id === id) {\r\n          return { ...row, isEditMode: !row.isEditMode };\r\n        }\r\n        return row;\r\n      });\r\n    });\r\n  };\r\n\r\n  const onChange = (e, row) => {\r\n    if (!previous[row.id]) {\r\n      setPrevious((state) => ({ ...state, [row.id]: row }));\r\n    }\r\n    const value = e.target.value;\r\n    const name = e.target.name;\r\n    const { id } = row;\r\n    const newRows = rows.map((row) => {\r\n      if (row.id === id) {\r\n        return { ...row, [name]: value };\r\n      }\r\n      return row;\r\n    });\r\n    setRows(newRows);\r\n  };\r\n\r\n  const onRevert = (id) => {\r\n    const newRows = rows.map((row) => {\r\n      if (row.id === id) {\r\n        return previous[id] ? previous[id] : row;\r\n      }\r\n      return row;\r\n    });\r\n    setRows(newRows);\r\n    setPrevious((state) => {\r\n      delete state[id];\r\n      return state;\r\n    });\r\n    onToggleEditMode(id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AboveTableText headerText={\"Summary probation period\"} />\r\n      <Paper className={classes.root}>\r\n        <Table className={classes.table} aria-label=\"caption table\">\r\n          <TableHead>\r\n            <TableRow style={{ backgroundColor: \"#AF0000\" }}>\r\n              <TableCell className={classes.tableHeaderText} align=\"left\" />\r\n              <TableCell\r\n                className={classes.tableHeaderText}\r\n                align=\"left\"\r\n                style={{ paddingBottom: \"10px\" }}\r\n              >\r\n                Item\r\n              </TableCell>\r\n\r\n              <TableCell className={classes.tableHeaderText} align=\"left\">\r\n                2018/2019\r\n              </TableCell>\r\n\r\n              <TableCell className={classes.tableHeaderText} align=\"left\">\r\n                2017/2018\r\n              </TableCell>\r\n\r\n              <TableCell className={classes.tableHeaderText} align=\"left\">\r\n                2016/2017\r\n              </TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n\r\n          <TableBody>\r\n            <TableRow>\r\n              <TableCell>1</TableCell>\r\n              <TableCell style={{ fontWeight: \"bold\", fontSize: \"18px\" }}>\r\n                Total Number of Students\r\n              </TableCell>\r\n              {rows.map((row) => (\r\n                <CustomTableCell\r\n                  {...{ row, name: \"totalNumberOfStudents\", onChange }}\r\n                />\r\n              ))}\r\n            </TableRow>\r\n\r\n            <TableRow>\r\n              <TableCell>1</TableCell>\r\n              <TableCell style={{ fontWeight: \"bold\", fontSize: \"18px\" }}>\r\n                Entry Students\r\n              </TableCell>\r\n\r\n              {rows.map((row) => (\r\n                <CustomTableCell\r\n                  {...{\r\n                    row,\r\n                    name: \"entryStudents\",\r\n                    totalStud: \"totalNumberOfStudents\",\r\n                    onChange,\r\n                  }}\r\n                />\r\n              ))}\r\n            </TableRow>\r\n\r\n            <TableRow>\r\n              <TableCell>1</TableCell>\r\n              <TableCell style={{ fontWeight: \"bold\", fontSize: \"18px\" }}>\r\n                Continued\r\n              </TableCell>\r\n\r\n              {rows.map((row) => (\r\n                <CustomTableCell\r\n                  {...{\r\n                    row,\r\n                    name: \"continued\",\r\n                    totalStud: \"totalNumberOfStudents\",\r\n                    onChange,\r\n                  }}\r\n                />\r\n              ))}\r\n            </TableRow>\r\n\r\n            <TableRow>\r\n              <TableCell>1</TableCell>\r\n              <TableCell style={{ fontWeight: \"bold\", fontSize: \"18px\" }}>\r\n                Enhancing Modules\r\n              </TableCell>\r\n              {rows.map((row) => (\r\n                <CustomTableCell\r\n                  {...{\r\n                    row,\r\n                    name: \"enhancingModules\",\r\n                    totalStud: \"totalNumberOfStudents\",\r\n                    onChange,\r\n                  }}\r\n                />\r\n              ))}\r\n            </TableRow>\r\n            <TableRow>\r\n              <TableCell>1</TableCell>\r\n              <TableCell style={{ fontWeight: \"bold\", fontSize: \"18px\" }}>\r\n                Repeating Modules\r\n              </TableCell>\r\n              {rows.map((row) => (\r\n                <CustomTableCell\r\n                  {...{\r\n                    row,\r\n                    name: \"repeatingModules\",\r\n                    totalStud: \"totalNumberOfStudents\",\r\n                    onChange,\r\n                  }}\r\n                />\r\n              ))}\r\n            </TableRow>\r\n            <TableRow>\r\n              <TableCell>1</TableCell>\r\n              <TableCell style={{ fontWeight: \"bold\", fontSize: \"18px\" }}>\r\n                Total progressing to thesis\r\n              </TableCell>\r\n              {rows.map((row) => (\r\n                <CustomTableCell\r\n                  {...{\r\n                    row,\r\n                    name: \"totalProgressingToThesis\",\r\n                    totalStud: \"totalNumberOfStudents\",\r\n                    onChange,\r\n                  }}\r\n                />\r\n              ))}\r\n            </TableRow>\r\n          </TableBody>\r\n        </Table>\r\n      </Paper>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default EditableTable;\r\n","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\ProgramBoardDecisions\\PBDTables\\ProgressionThesisProposal.jsx",["183"],"import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport AboveTableText from \"../../../AboveTableText\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    marginTop: theme.spacing(3),\r\n    overflowX: \"auto\",\r\n  },\r\n  table: {\r\n    minWidth: 650,\r\n    borderCollapse: \"separate\",\r\n  },\r\n  selectTableCell: {\r\n    width: 60,\r\n  },\r\n  tableCell: {\r\n    maxWidth: \"30vw\",\r\n    height: 40,\r\n    textAlign: \"center\",\r\n    fontSize: \"25px\",\r\n    \"&:hover\": {\r\n      color: \"black\",\r\n      backgroundColor: \"rgb(0, 0, 0, 0.1)\",\r\n    },\r\n  },\r\n  input: {\r\n    width: 130,\r\n    height: 40,\r\n    fontSize: \"25px\",\r\n  },\r\n  tableHeaderText: {\r\n    color: \"white\",\r\n    textAlign: \"center\",\r\n    borderBottom: \"none\",\r\n    fontSize: \"1.1em\",\r\n    border: \"1px solid white\",\r\n  },\r\n  tableHeaderEmpty: {\r\n    color: \"white\",\r\n    textAlign: \"center\",\r\n    borderBottom: \"none\",\r\n    fontSize: \"1.1em\",\r\n    borderRight: \"1px solid white\",\r\n    borderLeft: \"1px solid white\",\r\n  },\r\n}));\r\n\r\n// const createData = (\r\n//   batch,\r\n//   yearofEntry,\r\n//   bScCertificate,\r\n//   totalNewStudentsPerSemester,\r\n//   totalNewStudentsPerYear\r\n// ) => ({\r\n//   id: batch.replace(\" \", \"_\"),\r\n//   batch,\r\n//   yearofEntry,\r\n//   bScCertificate,\r\n//   totalNewStudentsPerSemester,\r\n//   totalNewStudentsPerYear,\r\n//   isEditMode: false,\r\n// });\r\n\r\nconst CustomTableCell = ({ row, name, onChange }) => {\r\n  const classes = useStyles();\r\n  const { isEditMode } = row;\r\n  return (\r\n    <TableCell align=\"left\" className={classes.tableCell}>\r\n      {isEditMode ? (\r\n        <Input\r\n          inputProps={{ min: 0, style: { textAlign: \"center\" } }}\r\n          value={row[name]}\r\n          name={name}\r\n          onChange={(e) => onChange(e, row)}\r\n          className={classes.input}\r\n        />\r\n      ) : (\r\n        row[name]\r\n      )}\r\n    </TableCell>\r\n  );\r\n};\r\n\r\nfunction EditableTable() {\r\n  const [rows, setRows] = React.useState([\r\n    // createData(\"1\", 159, 6.0, 24, 4.0),\r\n    // createData(\"2\", 237, 9.0, 37, 4.3),\r\n    // createData(\"3\", 262, 16.0, 24, 6.0),\r\n    // createData(\"3\", 262, 16.0, 24, 6.0),\r\n    // createData(\"3\", 262, 16.0, 24, 6.0),\r\n    // createData(\"3\", 262, 16.0, 24, 6.0),\r\n    {\r\n      id: 1,\r\n      batch: \"1\",\r\n      yearOfEntry: \"S1 18/19\",\r\n      totalNoInProgram: 80,\r\n      studentsQualified: 10,\r\n      qualifiedProgressionPerc: 5,\r\n      studentsSubmittedProposal: 20,\r\n      submittedProgreesionPerc: 30,\r\n    },\r\n    {\r\n      id: 2,\r\n      batch: \"2\",\r\n      yearOfEntry: \"S1 17/18\",\r\n      totalNoInProgram: 100,\r\n      studentsQualified: 8,\r\n      qualifiedProgressionPerc: 9,\r\n      studentsSubmittedProposal: 65,\r\n      submittedProgreesionPerc: 33,\r\n    },\r\n    {\r\n      id: 3,\r\n      batch: \"3\",\r\n      yearOfEntry: \"S2 16/17\",\r\n      totalNoInProgram: 50,\r\n      studentsQualified: 10,\r\n      qualifiedProgressionPerc: 14,\r\n      studentsSubmittedProposal: 20,\r\n      submittedProgreesionPerc: 7,\r\n    },\r\n  ]);\r\n  const [previous, setPrevious] = React.useState({});\r\n  const classes = useStyles();\r\n\r\n  const onToggleEditMode = (id) => {\r\n    setRows((state) => {\r\n      return rows.map((row) => {\r\n        if (row.id === id) {\r\n          return { ...row, isEditMode: !row.isEditMode };\r\n        }\r\n        return row;\r\n      });\r\n    });\r\n  };\r\n\r\n  const onChange = (e, row) => {\r\n    if (!previous[row.id]) {\r\n      setPrevious((state) => ({ ...state, [row.id]: row }));\r\n    }\r\n    const value = e.target.value;\r\n    const name = e.target.name;\r\n    const { id } = row;\r\n    const newRows = rows.map((row) => {\r\n      if (row.id === id) {\r\n        return { ...row, [name]: value };\r\n      }\r\n      return row;\r\n    });\r\n    setRows(newRows);\r\n  };\r\n\r\n  const onRevert = (id) => {\r\n    const newRows = rows.map((row) => {\r\n      if (row.id === id) {\r\n        return previous[id] ? previous[id] : row;\r\n      }\r\n      return row;\r\n    });\r\n    setRows(newRows);\r\n    setPrevious((state) => {\r\n      delete state[id];\r\n      return state;\r\n    });\r\n    onToggleEditMode(id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AboveTableText headerText={\"Progression of thesis proposal\"} />\r\n      <Paper className={classes.root}>\r\n        <Table className={classes.table} aria-label=\"caption table\">\r\n          <TableHead>\r\n            <TableRow style={{ backgroundColor: \"#AF0000\" }}>\r\n              <TableCell\r\n                className={classes.tableHeaderEmpty}\r\n                align=\"left\"\r\n              ></TableCell>\r\n              <TableCell className={classes.tableHeaderEmpty} align=\"left\">\r\n                Batch\r\n              </TableCell>\r\n              <TableCell className={classes.tableHeaderEmpty} align=\"left\">\r\n                Year of Entry to thesis propsal\r\n              </TableCell>\r\n              <TableCell className={classes.tableHeaderText} align=\"left\">\r\n                Total No. in program\r\n              </TableCell>\r\n              <TableCell className={classes.tableHeaderText} align=\"left\">\r\n                Students qualified\r\n              </TableCell>\r\n              <TableCell className={classes.tableHeaderEmpty} align=\"left\">\r\n                Qualified Progression %\r\n              </TableCell>\r\n              <TableCell className={classes.tableHeaderEmpty} align=\"left\">\r\n                Students submitted propsals\r\n              </TableCell>\r\n              <TableCell className={classes.tableHeaderEmpty} align=\"left\">\r\n                Submitted progression %\r\n              </TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {rows.map((row) => (\r\n              <TableRow key={row.id}>\r\n                <TableCell>*</TableCell>\r\n\r\n                <CustomTableCell {...{ row, name: \"batch\", onChange }} />\r\n                <CustomTableCell {...{ row, name: \"yearOfEntry\", onChange }} />\r\n                <CustomTableCell\r\n                  {...{ row, name: \"totalNoInProgram\", onChange }}\r\n                />\r\n                <CustomTableCell\r\n                  {...{ row, name: \"studentsQualified\", onChange }}\r\n                />\r\n                <CustomTableCell\r\n                  {...{ row, name: \"qualifiedProgressionPerc\", onChange }}\r\n                />\r\n                <CustomTableCell\r\n                  {...{ row, name: \"studentsSubmittedProposal\", onChange }}\r\n                />\r\n                <CustomTableCell\r\n                  {...{ row, name: \"submittedProgreesionPerc\", onChange }}\r\n                />\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n        {/*<Button variant=\"contained\" onClick={() => console.log(rows)}>\r\n        print state (TEST ONLY)\r\n                </Button>*/}\r\n      </Paper>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default EditableTable;\r\n","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\ProgramBoardDecisions\\PBDTables\\VoluntaryWithdrawls.jsx",["184"],"import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport AboveTableText from \"../../../AboveTableText\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    marginTop: theme.spacing(3),\r\n    overflowX: \"auto\",\r\n  },\r\n  table: {\r\n    minWidth: 650,\r\n    borderCollapse: \"separate\",\r\n  },\r\n  selectTableCell: {\r\n    width: 60,\r\n  },\r\n  tableCell: {\r\n    maxWidth: \"30vw\",\r\n    height: 40,\r\n    textAlign: \"center\",\r\n    fontSize: \"25px\",\r\n    \"&:hover\": {\r\n      color: \"black\",\r\n      backgroundColor: \"rgb(0, 0, 0, 0.1)\",\r\n    },\r\n  },\r\n  input: {\r\n    width: 130,\r\n    height: 40,\r\n  },\r\n  tableHeaderText: {\r\n    color: \"white\",\r\n    textAlign: \"center\",\r\n    borderBottom: \"none\",\r\n    fontSize: \"1.1em\",\r\n    border: \"1px solid white\",\r\n  },\r\n  tableHeaderEmpty: {\r\n    color: \"white\",\r\n    textAlign: \"center\",\r\n    borderBottom: \"none\",\r\n    fontSize: \"1.1em\",\r\n    borderRight: \"1px solid white\",\r\n    borderLeft: \"1px solid white\",\r\n  },\r\n}));\r\n\r\n// const createData = (\r\n//   batch,\r\n//   yearofEntry,\r\n//   bScCertificate,\r\n//   totalNewStudentsPerSemester,\r\n//   totalNewStudentsPerYear\r\n// ) => ({\r\n//   id: batch.replace(\" \", \"_\"),\r\n//   batch,\r\n//   yearofEntry,\r\n//   bScCertificate,\r\n//   totalNewStudentsPerSemester,\r\n//   totalNewStudentsPerYear,\r\n//   isEditMode: false,\r\n// });\r\n\r\nconst CustomTableCell = ({ row, name, onChange }) => {\r\n  const classes = useStyles();\r\n  const { isEditMode } = row;\r\n  return (\r\n    <TableCell align=\"left\" className={classes.tableCell}>\r\n      {isEditMode ? (\r\n        <Input\r\n          inputProps={{ min: 0, style: { textAlign: \"center\" } }}\r\n          value={row[name]}\r\n          name={name}\r\n          onChange={(e) => onChange(e, row)}\r\n          className={classes.input}\r\n        />\r\n      ) : (\r\n        row[name]\r\n      )}\r\n    </TableCell>\r\n  );\r\n};\r\n\r\nfunction EditableTable() {\r\n  const [rows, setRows] = React.useState([\r\n    {\r\n      id: 1,\r\n      batch: \"1\",\r\n      yearOfEntry: \"S1 18/19\",\r\n      numberOfWithdrawls: 10,\r\n      reasonsForWithdrawl: \"Example 1.....\",\r\n    },\r\n    {\r\n      id: 2,\r\n      batch: \"2\",\r\n      yearOfEntry: \"S1 17/18\",\r\n      numberOfWithdrawls: 15,\r\n      reasonsForWithdrawl: \"Example 2.....\",\r\n    },\r\n    {\r\n      id: 3,\r\n      batch: \"3\",\r\n      yearOfEntry: \"S2 16/17\",\r\n      numberOfWithdrawls: 7,\r\n      reasonsForWithdrawl: \"Example 3.....\",\r\n    },\r\n  ]);\r\n  const [previous, setPrevious] = React.useState({});\r\n  const classes = useStyles();\r\n\r\n  const onToggleEditMode = (id) => {\r\n    setRows((state) => {\r\n      return rows.map((row) => {\r\n        if (row.id === id) {\r\n          return { ...row, isEditMode: !row.isEditMode };\r\n        }\r\n        return row;\r\n      });\r\n    });\r\n  };\r\n\r\n  const onChange = (e, row) => {\r\n    if (!previous[row.id]) {\r\n      setPrevious((state) => ({ ...state, [row.id]: row }));\r\n    }\r\n    const value = e.target.value;\r\n    const name = e.target.name;\r\n    const { id } = row;\r\n    const newRows = rows.map((row) => {\r\n      if (row.id === id) {\r\n        return { ...row, [name]: value };\r\n      }\r\n      return row;\r\n    });\r\n    setRows(newRows);\r\n  };\r\n\r\n  const onRevert = (id) => {\r\n    const newRows = rows.map((row) => {\r\n      if (row.id === id) {\r\n        return previous[id] ? previous[id] : row;\r\n      }\r\n      return row;\r\n    });\r\n    setRows(newRows);\r\n    setPrevious((state) => {\r\n      delete state[id];\r\n      return state;\r\n    });\r\n    onToggleEditMode(id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AboveTableText headerText={\"Voulntary Withdrawls\"} />\r\n      <Paper className={classes.root}>\r\n        <Table className={classes.table} aria-label=\"caption table\">\r\n          <TableHead>\r\n            <TableRow style={{ backgroundColor: \"#AF0000\" }}>\r\n              <TableCell\r\n                className={classes.tableHeaderEmpty}\r\n                align=\"left\"\r\n              ></TableCell>\r\n              <TableCell className={classes.tableHeaderEmpty} align=\"left\">\r\n                Batch\r\n              </TableCell>\r\n              <TableCell className={classes.tableHeaderEmpty} align=\"left\">\r\n                Year\r\n              </TableCell>\r\n              <TableCell className={classes.tableHeaderText} align=\"left\">\r\n                Number of Withdrawls\r\n              </TableCell>\r\n              <TableCell className={classes.tableHeaderText} align=\"left\">\r\n                Reasons for Withdrawl\r\n              </TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {rows.map((row) => (\r\n              <TableRow key={row.id}>\r\n                <TableCell>*</TableCell>\r\n\r\n                <CustomTableCell {...{ row, name: \"batch\", onChange }} />\r\n                <CustomTableCell {...{ row, name: \"yearOfEntry\", onChange }} />\r\n                <CustomTableCell\r\n                  {...{ row, name: \"numberOfWithdrawls\", onChange }}\r\n                />\r\n                <CustomTableCell\r\n                  {...{ row, name: \"reasonsForWithdrawl\", onChange }}\r\n                />\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n        {/*<Button variant=\"contained\" onClick={() => console.log(rows)}>\r\n        print state (TEST ONLY)\r\n                </Button>*/}\r\n      </Paper>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default EditableTable;\r\n","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\ProgramBoardDecisions\\PBDTables\\ExpectedToGraduate.jsx",["185"],"import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport AboveTableText from \"../../../AboveTableText\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    marginTop: theme.spacing(3),\r\n    overflowX: \"auto\",\r\n  },\r\n  table: {\r\n    minWidth: 650,\r\n    borderCollapse: \"separate\",\r\n  },\r\n  selectTableCell: {\r\n    width: 60,\r\n  },\r\n  tableCell: {\r\n    maxWidth: \"30vw\",\r\n    height: 40,\r\n    textAlign: \"center\",\r\n    fontSize: \"25px\",\r\n    \"&:hover\": {\r\n      color: \"black\",\r\n      backgroundColor: \"rgb(0, 0, 0, 0.1)\",\r\n    },\r\n  },\r\n  input: {\r\n    width: 130,\r\n    height: 40,\r\n  },\r\n  tableHeaderText: {\r\n    color: \"white\",\r\n    textAlign: \"center\",\r\n    borderBottom: \"none\",\r\n    fontSize: \"1.1em\",\r\n    border: \"1px solid white\",\r\n  },\r\n  tableHeaderEmpty: {\r\n    color: \"white\",\r\n    textAlign: \"center\",\r\n    borderBottom: \"none\",\r\n    fontSize: \"1.1em\",\r\n    borderRight: \"1px solid white\",\r\n    borderLeft: \"1px solid white\",\r\n  },\r\n}));\r\n\r\n// const createData = (\r\n//   batch,\r\n//   yearofEntry,\r\n//   bScCertificate,\r\n//   totalNewStudentsPerSemester,\r\n//   totalNewStudentsPerYear\r\n// ) => ({\r\n//   id: batch.replace(\" \", \"_\"),\r\n//   batch,\r\n//   yearofEntry,\r\n//   bScCertificate,\r\n//   totalNewStudentsPerSemester,\r\n//   totalNewStudentsPerYear,\r\n//   isEditMode: false,\r\n// });\r\n\r\nconst CustomTableCell = ({ row, name, onChange }) => {\r\n  const classes = useStyles();\r\n  const { isEditMode } = row;\r\n  return (\r\n    <TableCell align=\"left\" className={classes.tableCell}>\r\n      {isEditMode ? (\r\n        <Input\r\n          inputProps={{ min: 0, style: { textAlign: \"center\" } }}\r\n          value={row[name]}\r\n          name={name}\r\n          onChange={(e) => onChange(e, row)}\r\n          className={classes.input}\r\n        />\r\n      ) : (\r\n        row[name]\r\n      )}\r\n    </TableCell>\r\n  );\r\n};\r\n\r\nfunction EditableTable() {\r\n  const [rows, setRows] = React.useState([\r\n    {\r\n      id: 1,\r\n      yearOfEntry: \"S1 18/19\",\r\n      name: \"Mohamed Wael Salah\",\r\n      GPA: \"2.8\",\r\n      status: \"Pending...\",\r\n    },\r\n    {\r\n      id: 2,\r\n      yearOfEntry: \"S1 17/18\",\r\n      name: \"Rana El Masry\",\r\n      GPA: \"0.9\",\r\n      status: \"Graduated\",\r\n    },\r\n    {\r\n      id: 3,\r\n      yearOfEntry: \"S2 16/17\",\r\n      name: \"Habiba\",\r\n      GPA: \"1.0\",\r\n      status: \"Graduated\",\r\n    },\r\n  ]);\r\n  const [previous, setPrevious] = React.useState({});\r\n  const classes = useStyles();\r\n\r\n  const onToggleEditMode = (id) => {\r\n    setRows((state) => {\r\n      return rows.map((row) => {\r\n        if (row.id === id) {\r\n          return { ...row, isEditMode: !row.isEditMode };\r\n        }\r\n        return row;\r\n      });\r\n    });\r\n  };\r\n\r\n  const onChange = (e, row) => {\r\n    if (!previous[row.id]) {\r\n      setPrevious((state) => ({ ...state, [row.id]: row }));\r\n    }\r\n    const value = e.target.value;\r\n    const name = e.target.name;\r\n    const { id } = row;\r\n    const newRows = rows.map((row) => {\r\n      if (row.id === id) {\r\n        return { ...row, [name]: value };\r\n      }\r\n      return row;\r\n    });\r\n    setRows(newRows);\r\n  };\r\n\r\n  const onRevert = (id) => {\r\n    const newRows = rows.map((row) => {\r\n      if (row.id === id) {\r\n        return previous[id] ? previous[id] : row;\r\n      }\r\n      return row;\r\n    });\r\n    setRows(newRows);\r\n    setPrevious((state) => {\r\n      delete state[id];\r\n      return state;\r\n    });\r\n    onToggleEditMode(id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AboveTableText headerText={\"Expected to graduate\"} />\r\n      <Paper className={classes.root}>\r\n        <Table className={classes.table} aria-label=\"caption table\">\r\n          <TableHead>\r\n            <TableRow style={{ backgroundColor: \"#AF0000\" }}>\r\n              <TableCell\r\n                className={classes.tableHeaderEmpty}\r\n                align=\"left\"\r\n              ></TableCell>\r\n              <TableCell className={classes.tableHeaderEmpty} align=\"left\">\r\n                Year of Entry\r\n              </TableCell>\r\n              <TableCell className={classes.tableHeaderText} align=\"left\">\r\n                Name\r\n              </TableCell>\r\n              <TableCell className={classes.tableHeaderText} align=\"left\">\r\n                GPA\r\n              </TableCell>\r\n              <TableCell className={classes.tableHeaderEmpty} align=\"left\">\r\n                Status\r\n              </TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {rows.map((row) => (\r\n              <TableRow key={row.id}>\r\n                <TableCell>*</TableCell>\r\n                <CustomTableCell {...{ row, name: \"yearOfEntry\", onChange }} />\r\n                <CustomTableCell {...{ row, name: \"name\", onChange }} />\r\n                <CustomTableCell {...{ row, name: \"GPA\", onChange }} />\r\n                <CustomTableCell {...{ row, name: \"status\", onChange }} />\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n        {/*<Button variant=\"contained\" onClick={() => console.log(rows)}>\r\n        print state (TEST ONLY)\r\n                </Button>*/}\r\n      </Paper>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default EditableTable;\r\n","C:\\Users\\moonl\\apr\\src\\components\\Tabels\\ProgramBoardDecisions\\PBDTables\\DegreeAwarded.jsx",["186"],"import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport AboveTableText from \"../../../AboveTableText\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    marginTop: theme.spacing(3),\r\n    overflowX: \"auto\",\r\n  },\r\n  table: {\r\n    minWidth: 650,\r\n    borderCollapse: \"separate\",\r\n  },\r\n  selectTableCell: {\r\n    width: 60,\r\n  },\r\n  tableCell: {\r\n    maxWidth: \"30vw\",\r\n    height: 40,\r\n    textAlign: \"center\",\r\n    fontSize: \"25px\",\r\n    \"&:hover\": {\r\n      color: \"black\",\r\n      backgroundColor: \"rgb(0, 0, 0, 0.1)\",\r\n    },\r\n  },\r\n  input: {\r\n    width: 130,\r\n    height: 40,\r\n  },\r\n  tableHeaderText: {\r\n    color: \"white\",\r\n    textAlign: \"center\",\r\n    borderBottom: \"none\",\r\n    fontSize: \"1.1em\",\r\n    border: \"1px solid white\",\r\n  },\r\n  tableHeaderEmpty: {\r\n    color: \"white\",\r\n    textAlign: \"center\",\r\n    borderBottom: \"none\",\r\n    fontSize: \"1.1em\",\r\n    borderRight: \"1px solid white\",\r\n    borderLeft: \"1px solid white\",\r\n  },\r\n}));\r\n\r\n// const createData = (\r\n//   batch,\r\n//   yearofEntry,\r\n//   bScCertificate,\r\n//   totalNewStudentsPerSemester,\r\n//   totalNewStudentsPerYear\r\n// ) => ({\r\n//   id: batch.replace(\" \", \"_\"),\r\n//   batch,\r\n//   yearofEntry,\r\n//   bScCertificate,\r\n//   totalNewStudentsPerSemester,\r\n//   totalNewStudentsPerYear,\r\n//   isEditMode: false,\r\n// });\r\n\r\nconst CustomTableCell = ({ row, name, onChange }) => {\r\n  const classes = useStyles();\r\n  const { isEditMode } = row;\r\n  return (\r\n    <TableCell align=\"left\" className={classes.tableCell}>\r\n      {isEditMode ? (\r\n        <Input\r\n          inputProps={{ min: 0, style: { textAlign: \"center\" } }}\r\n          value={row[name]}\r\n          name={name}\r\n          onChange={(e) => onChange(e, row)}\r\n          className={classes.input}\r\n        />\r\n      ) : (\r\n        row[name]\r\n      )}\r\n    </TableCell>\r\n  );\r\n};\r\n\r\nfunction EditableTable() {\r\n  const [rows, setRows] = React.useState([\r\n    {\r\n      id: 1,\r\n      yearOfEntry: \"S1 18/19\",\r\n      numberOfStudents: 60,\r\n      degreeSought: \"M. Sc.\",\r\n    },\r\n    {\r\n      id: 2,\r\n      yearOfEntry: \"S1 17/18\",\r\n      numberOfStudents: 100,\r\n      degreeSought: \"M. Sc.\",\r\n    },\r\n    {\r\n      id: 3,\r\n      yearOfEntry: \"S2 16/17\",\r\n      numberOfStudents: 99,\r\n      degreeSought: \"M. Sc.\",\r\n    },\r\n  ]);\r\n  const [previous, setPrevious] = React.useState({});\r\n  const classes = useStyles();\r\n\r\n  const onToggleEditMode = (id) => {\r\n    setRows((state) => {\r\n      return rows.map((row) => {\r\n        if (row.id === id) {\r\n          return { ...row, isEditMode: !row.isEditMode };\r\n        }\r\n        return row;\r\n      });\r\n    });\r\n  };\r\n\r\n  const onChange = (e, row) => {\r\n    if (!previous[row.id]) {\r\n      setPrevious((state) => ({ ...state, [row.id]: row }));\r\n    }\r\n    const value = e.target.value;\r\n    const name = e.target.name;\r\n    const { id } = row;\r\n    const newRows = rows.map((row) => {\r\n      if (row.id === id) {\r\n        return { ...row, [name]: value };\r\n      }\r\n      return row;\r\n    });\r\n    setRows(newRows);\r\n  };\r\n\r\n  const onRevert = (id) => {\r\n    const newRows = rows.map((row) => {\r\n      if (row.id === id) {\r\n        return previous[id] ? previous[id] : row;\r\n      }\r\n      return row;\r\n    });\r\n    setRows(newRows);\r\n    setPrevious((state) => {\r\n      delete state[id];\r\n      return state;\r\n    });\r\n    onToggleEditMode(id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AboveTableText headerText={\"Degree Awarded\"} />\r\n      <Paper className={classes.root}>\r\n        <Table className={classes.table} aria-label=\"caption table\">\r\n          <TableHead>\r\n            <TableRow style={{ backgroundColor: \"#AF0000\" }}>\r\n              <TableCell\r\n                className={classes.tableHeaderEmpty}\r\n                align=\"left\"\r\n              ></TableCell>\r\n              <TableCell className={classes.tableHeaderEmpty} align=\"left\">\r\n                Year of Graduation\r\n              </TableCell>\r\n              <TableCell className={classes.tableHeaderText} align=\"left\">\r\n                Number of Students\r\n              </TableCell>\r\n              <TableCell className={classes.tableHeaderText} align=\"left\">\r\n                Degree Sought\r\n              </TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {rows.map((row) => (\r\n              <TableRow key={row.id}>\r\n                <TableCell>*</TableCell>\r\n                <CustomTableCell {...{ row, name: \"yearOfEntry\", onChange }} />\r\n                <CustomTableCell\r\n                  {...{ row, name: \"numberOfStudents\", onChange }}\r\n                />\r\n                <CustomTableCell {...{ row, name: \"degreeSought\", onChange }} />\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n        {/*<Button variant=\"contained\" onClick={() => console.log(rows)}>\r\n        print state (TEST ONLY)\r\n                </Button>*/}\r\n      </Paper>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default EditableTable;\r\n","C:\\Users\\moonl\\apr\\src\\components\\Footer.jsx",["187","188","189","190","191","192"],"import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport footerLogo from \"../Assets/footer.png\";\r\nimport facebookLogo from \"../Assets/facebook.png\";\r\nimport linkedinLogo from \"../Assets/linkedin.png\";\r\nimport instaLogo from \"../Assets/instagram.png\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  copyRight: {\r\n    position: \"absolute\",\r\n    bottom: \"0\",\r\n    width: \"100%\",\r\n    height: \"26px\",\r\n    textAlign: \"center\",\r\n    color: \"white\",\r\n    borderTop: \"0.01em solid white\",\r\n    backgroundColor: \"#2a2b2e\",\r\n    fontSize: \"13px\",\r\n  },\r\n}));\r\n\r\nfunction Footer() {\r\n  const classes = useStyles();\r\n  return (\r\n    <React.Fragment>\r\n      <div\r\n        style={{\r\n          backgroundColor: \"#323336\",\r\n          height: \"230px\",\r\n          position: \"relative\",\r\n          marginTop: \"10%\",\r\n        }}\r\n      >\r\n        <div style={{ textAlign: \"center\", position: \"relative\" }}>\r\n          <img\r\n            src={footerLogo}\r\n            style={{\r\n              height: 80,\r\n              paddingTop: \"1vw\",\r\n            }}\r\n          />\r\n          <p style={{ color: \"white\" }}>\r\n            Get connected to us though our social media\r\n          </p>\r\n          <a\r\n            href=\"https://www.facebook.com/BUESoftwareProductionUnit\"\r\n            target=\"_blank\"\r\n          >\r\n            <img\r\n              src={facebookLogo}\r\n              style={{\r\n                height: 40,\r\n                paddingBottom: \"20px\",\r\n                paddingRight: \"1%\",\r\n              }}\r\n            />\r\n          </a>\r\n          <a\r\n            href=\"https://www.linkedin.com/company/bue-software-production-unit/\"\r\n            target=\"_blank\"\r\n          >\r\n            <img\r\n              src={linkedinLogo}\r\n              style={{\r\n                height: 40,\r\n                paddingBottom: \"20px\",\r\n                paddingRight: \"1%\",\r\n              }}\r\n            />\r\n          </a>\r\n\r\n          <img\r\n            src={instaLogo}\r\n            style={{\r\n              height: 40,\r\n              paddingBottom: \"20px\",\r\n            }}\r\n          />\r\n        </div>\r\n\r\n        <div className={classes.copyRight}>\r\n          Copyright @ 2020 Software Production Unit @ British Univeristy in\r\n          Egypt\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\nexport default Footer;\r\n","C:\\Users\\moonl\\apr\\src\\components\\Drawer.jsx",["193","194","195"],"import React from \"react\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\n\r\nimport EntryForTheAYs from \"./Tabels/EntryForTheAYsF/EntryForTheAYs\";\r\nimport EnglishLanguageLevels from \"./Tabels/EnglishLanguageLevels/EnglishLanguageLevels\";\r\nimport StaffSudentComMeetings from \"./Tabels/StaffStudentComMeetings/StaffStudentComMeetings\";\r\nimport ProgramFeedback from \"./Tabels/ProgramFeedback/ProgramFeedback\";\r\nimport TeachingStaff from \"./Tabels/TeachingStaff/TeachingStaff\";\r\nimport LSBULinkTutorReports from \"./Tabels/LSBULinkTutorReports/LSBULinkTutorReports\";\r\nimport ReviewOfAssessments from \"./Tabels/ReviewOfAssessments/ReviewOfAssessments\";\r\nimport ExternalExaminerReport from \"./Tabels/ExternalExaminerReport/ExternalExaminerReport\";\r\nimport ModuleSpecifications from \"./Tabels/ModuleSpecifications/ModuleSpecifications\";\r\nimport StaffBreakDownForTheCurrentAY from \"./Tabels/StaffBreakDownForTheCurrentAY/StaffBreakDownForTheCurrentAY\";\r\nimport StudentProfileAndMarketing from \"./Tabels/StudentProfileAndMarketing/StudentProfileAndMarketing\";\r\nimport SupportingDoc from \"./Tabels/SupportingDocumentation/SupportingDocumentation\";\r\n\r\nimport PBDMain from \"./Tabels/ProgramBoardDecisions/PBDMain\";\r\nimport SummaryProbationPeriod from \"./Tabels/ProgramBoardDecisions/PBDTables/SummaryProbationPeriod\";\r\nimport ProgressionThesisPropsal from \"./Tabels/ProgramBoardDecisions/PBDTables/ProgressionThesisProposal\";\r\nimport VoluntaryWithdrawls from \"./Tabels/ProgramBoardDecisions/PBDTables/VoluntaryWithdrawls\";\r\nimport ExpectedToGraduate from \"./Tabels/ProgramBoardDecisions/PBDTables/ExpectedToGraduate\";\r\nimport DegreeAwarded from \"./Tabels/ProgramBoardDecisions/PBDTables/DegreeAwarded\";\r\nimport CoreModulesTable from \"./Tabels/ProgramBoardDecisions/PBDTables/CoreModulesTable\";\r\n\r\nimport clsx from \"clsx\";\r\nimport ExpandLess from \"@material-ui/icons/ExpandLess\";\r\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n\r\nimport svgTest from \"./half2.svg\";\r\n\r\nconst drawerWidth = 300;\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  appBar: {\r\n    transition: theme.transitions.create([\"margin\", \"width\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    marginLeft: drawerWidth,\r\n    transition: theme.transitions.create([\"margin\", \"width\"], {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  list: {\r\n    width: 250,\r\n  },\r\n  fullList: {\r\n    width: \"auto\",\r\n  },\r\n  leftSideMenuButton: {\r\n    position: \"fixed\",\r\n    left: \"0px\",\r\n    top: \"40%\",\r\n    zIndex: 100,\r\n    opacity: \"0.9\",\r\n    \"&:hover\": {\r\n      cursor: \"pointer\",\r\n    },\r\n  },\r\n  nested: {\r\n    paddingLeft: theme.spacing(4),\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  hide: {\r\n    display: \"none\",\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n    margin: 0,\r\n  },\r\n  drawerHeader: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    padding: theme.spacing(0, 1),\r\n    // necessary for content to be below app bar\r\n    ...theme.mixins.toolbar,\r\n    justifyContent: \"flex-end\",\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n    transition: theme.transitions.create(\"margin\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    marginLeft: -drawerWidth,\r\n  },\r\n  contentShift: {\r\n    transition: theme.transitions.create(\"margin\", {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n    marginLeft: 0,\r\n  },\r\n}));\r\n\r\nexport default function TemporaryDrawer(props) {\r\n  const classes = useStyles();\r\n\r\n  const { setDrawerWidth, drawerWidth } = props;\r\n\r\n  const [state, setState] = React.useState({\r\n    left: false,\r\n  });\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const [openSub, setOpenSub] = React.useState(false);\r\n\r\n  const [value, setValue] = React.useState(\"Entry for the AYs\");\r\n\r\n  const TabsInfo = [\r\n    \"Entry for the AYs\",\r\n    \"English Language Levels\",\r\n    \"Program Board Decisions\",\r\n    \"Staff-Student Liaison committe\",\r\n    \"Program & Module feedback\",\r\n    \"Teaching Staff\",\r\n    \"LSBU link tutor reports\",\r\n    \"Review of assessments\",\r\n    \"External Examiner Report\",\r\n    \"Module Specifications\",\r\n    \"Staff breakdown for the current AY\",\r\n    \"Student profile & marketing\",\r\n    \"Support documentation\",\r\n  ];\r\n  const PBDTabs = [\r\n    \"Core Modules\",\r\n    \"Optional Modules\",\r\n    \"Summary of the probation\",\r\n    \"Progression to Thesis proposal\",\r\n    \"Voluntary Withdrawls and/or Offical Dismissed\",\r\n    \"Expected to be graduated\",\r\n    \"Degrees awarded\",\r\n  ];\r\n  const renderTabs = () => {\r\n    return value === \"Entry for the AYs\" ? (\r\n      <EntryForTheAYs />\r\n    ) : value === \"English Language Levels\" ? (\r\n      <EnglishLanguageLevels />\r\n    ) : value === \"Program Board Decisions\" ? (\r\n      <PBDMain />\r\n    ) : value === \"Staff-Student Liaison committe\" ? (\r\n      <StaffSudentComMeetings />\r\n    ) : value === \"Program & Module feedback\" ? (\r\n      <ProgramFeedback />\r\n    ) : value === \"Teaching Staff\" ? (\r\n      <TeachingStaff />\r\n    ) : value === \"LSBU link tutor reports\" ? (\r\n      <LSBULinkTutorReports />\r\n    ) : value === \"Review of assessments\" ? (\r\n      <ReviewOfAssessments />\r\n    ) : value === \"External Examiner Report\" ? (\r\n      <ExternalExaminerReport />\r\n    ) : value === \"Module Specifications\" ? (\r\n      <ModuleSpecifications />\r\n    ) : value === \"Staff breakdown for the current AY\" ? (\r\n      <StaffBreakDownForTheCurrentAY />\r\n    ) : value === \"Student profile & marketing\" ? (\r\n      <StudentProfileAndMarketing />\r\n    ) : value === \"Support documentation\" ? (\r\n      <SupportingDoc />\r\n    ) : value === \"Core Modules\" ? (\r\n      <CoreModulesTable />\r\n    ) : value === \"Optional Modules\" ? (\r\n      <CoreModulesTable />\r\n    ) : value === \"Summary of the probation\" ? (\r\n      <SummaryProbationPeriod />\r\n    ) : value === \"Progression to Thesis proposal\" ? (\r\n      <ProgressionThesisPropsal />\r\n    ) : value === \"Voluntary Withdrawls and/or Offical Dismissed\" ? (\r\n      <VoluntaryWithdrawls />\r\n    ) : value === \"Expected to be graduated\" ? (\r\n      <ExpectedToGraduate />\r\n    ) : value === \"Degrees awarded\" ? (\r\n      <DegreeAwarded />\r\n    ) : null;\r\n  };\r\n  const toggleDrawer = (anchor, open) => (event) => {\r\n    if (event.type === \"keydown\") {\r\n      return;\r\n    }\r\n    setState({ ...state, [anchor]: open });\r\n    setDrawerWidth(open);\r\n  };\r\n\r\n  const list = (anchor) => (\r\n    <>\r\n      <Divider />\r\n      <List>\r\n        {TabsInfo.map((text, index) =>\r\n          text === \"Program Board Decisions\" ? (\r\n            <>\r\n              <ListItem button key={text} onClick={() => setOpenSub(!openSub)}>\r\n                <ListItemText primary={text} />\r\n                {openSub ? <ExpandLess /> : <ExpandMore />}\r\n              </ListItem>\r\n              <Divider />\r\n              <Collapse in={openSub} timeout=\"auto\" unmountOnExit>\r\n                <List component=\"div\" disablePadding>\r\n                  {PBDTabs.map((text) => (\r\n                    <>\r\n                      <ListItem\r\n                        key={text}\r\n                        button\r\n                        className={classes.nested}\r\n                        style={\r\n                          value === text\r\n                            ? { backgroundColor: \"#AF0000\", color: \"white\" }\r\n                            : null\r\n                        }\r\n                        onClick={() => setValue(text)}\r\n                      >\r\n                        <ListItemText primary={text} key={text} />\r\n                      </ListItem>\r\n                      <Divider />\r\n                    </>\r\n                  ))}\r\n                </List>\r\n              </Collapse>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <ListItem\r\n                button\r\n                key={text}\r\n                onClick={() => setValue(text)}\r\n                style={\r\n                  value === text\r\n                    ? { backgroundColor: \"#AF0000\", color: \"white\" }\r\n                    : null\r\n                }\r\n              >\r\n                <ListItemText primary={text} />\r\n              </ListItem>\r\n              <Divider />\r\n            </>\r\n          )\r\n        )}\r\n      </List>\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        flexGrow: 1,\r\n        width: \"90%\",\r\n        marginLeft: \"auto\",\r\n        marginRight: \"auto\",\r\n      }}\r\n      className={clsx(classes.appBar, {\r\n        [classes.appBarShift]: open,\r\n      })}\r\n    >\r\n      <img\r\n        className={classes.leftSideMenuButton}\r\n        src={svgTest}\r\n        alt=\"\"\r\n        onClick={toggleDrawer(\"left\", true)}\r\n      />\r\n\r\n      <Drawer\r\n        anchor={\"left\"}\r\n        variant=\"persistent\"\r\n        open={state[\"left\"]}\r\n        onClose={toggleDrawer(\"left\", false)}\r\n        classes={{\r\n          paper: classes.drawerPaper,\r\n        }}\r\n      >\r\n        <div className={classes.drawerHeader}>\r\n          <IconButton onClick={toggleDrawer(\"left\", open)}>\r\n            <ChevronLeftIcon />\r\n          </IconButton>\r\n        </div>\r\n        {list(\"left\")}\r\n      </Drawer>\r\n      <div className={classes.drawerHeader} />\r\n      <div style={state.left ? { marginLeft: 280 } : null}>{renderTabs()}</div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\moonl\\apr\\src\\components\\Login\\Login.jsx",["196","197","198","199","200","201","202","203"],"C:\\Users\\moonl\\apr\\src\\components\\NotFound.jsx",["204"],{"ruleId":"205","replacedBy":"206"},{"ruleId":"207","replacedBy":"208"},{"ruleId":"209","severity":1,"message":"210","line":7,"column":10,"nodeType":"211","messageId":"212","endLine":7,"endColumn":16},{"ruleId":"209","severity":1,"message":"213","line":8,"column":25,"nodeType":"211","messageId":"212","endLine":8,"endColumn":29},{"ruleId":"209","severity":1,"message":"214","line":5,"column":8,"nodeType":"211","messageId":"212","endLine":5,"endColumn":12},{"ruleId":"209","severity":1,"message":"215","line":11,"column":8,"nodeType":"211","messageId":"212","endLine":11,"endColumn":15},{"ruleId":"205","replacedBy":"216"},{"ruleId":"207","replacedBy":"217"},{"ruleId":"209","severity":1,"message":"218","line":184,"column":9,"nodeType":"211","messageId":"212","endLine":184,"endColumn":17},{"ruleId":"209","severity":1,"message":"218","line":154,"column":9,"nodeType":"211","messageId":"212","endLine":154,"endColumn":17},{"ruleId":"209","severity":1,"message":"218","line":162,"column":9,"nodeType":"211","messageId":"212","endLine":162,"endColumn":17},{"ruleId":"209","severity":1,"message":"218","line":146,"column":9,"nodeType":"211","messageId":"212","endLine":146,"endColumn":17},{"ruleId":"209","severity":1,"message":"218","line":146,"column":9,"nodeType":"211","messageId":"212","endLine":146,"endColumn":17},{"ruleId":"209","severity":1,"message":"218","line":143,"column":9,"nodeType":"211","messageId":"212","endLine":143,"endColumn":17},{"ruleId":"219","severity":1,"message":"220","line":34,"column":11,"nodeType":"221","endLine":40,"endColumn":13},{"ruleId":"222","severity":1,"message":"223","line":46,"column":13,"nodeType":"224","endLine":46,"endColumn":28},{"ruleId":"219","severity":1,"message":"220","line":48,"column":13,"nodeType":"221","endLine":55,"endColumn":15},{"ruleId":"222","severity":1,"message":"223","line":59,"column":13,"nodeType":"224","endLine":59,"endColumn":28},{"ruleId":"219","severity":1,"message":"220","line":61,"column":13,"nodeType":"221","endLine":68,"endColumn":15},{"ruleId":"219","severity":1,"message":"220","line":71,"column":11,"nodeType":"221","endLine":77,"endColumn":13},{"ruleId":"209","severity":1,"message":"225","line":2,"column":22,"nodeType":"211","messageId":"212","endLine":2,"endColumn":30},{"ruleId":"209","severity":1,"message":"226","line":120,"column":27,"nodeType":"211","messageId":"212","endLine":120,"endColumn":38},{"ruleId":"209","severity":1,"message":"227","line":126,"column":16,"nodeType":"211","messageId":"212","endLine":126,"endColumn":23},{"ruleId":"209","severity":1,"message":"228","line":11,"column":3,"nodeType":"211","messageId":"212","endLine":11,"endColumn":17},{"ruleId":"209","severity":1,"message":"229","line":15,"column":10,"nodeType":"211","messageId":"212","endLine":15,"endColumn":14},{"ruleId":"209","severity":1,"message":"230","line":15,"column":16,"nodeType":"211","messageId":"212","endLine":15,"endColumn":20},{"ruleId":"209","severity":1,"message":"210","line":17,"column":10,"nodeType":"211","messageId":"212","endLine":17,"endColumn":16},{"ruleId":"209","severity":1,"message":"231","line":17,"column":18,"nodeType":"211","messageId":"212","endLine":17,"endColumn":23},{"ruleId":"209","severity":1,"message":"232","line":17,"column":25,"nodeType":"211","messageId":"212","endLine":17,"endColumn":31},{"ruleId":"209","severity":1,"message":"233","line":17,"column":33,"nodeType":"211","messageId":"212","endLine":17,"endColumn":41},{"ruleId":"209","severity":1,"message":"234","line":65,"column":25,"nodeType":"211","messageId":"212","endLine":65,"endColumn":33},{"ruleId":"209","severity":1,"message":"235","line":1,"column":17,"nodeType":"211","messageId":"212","endLine":1,"endColumn":26},"no-native-reassign",["236"],"no-negated-in-lhs",["237"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'Tabs' is defined but never used.","'Divider' is defined but never used.",["236"],["237"],"'onRevert' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'useTheme' is defined but never used.","'drawerWidth' is assigned a value but never used.","'setOpen' is assigned a value but never used.","'InputAdornment' is defined but never used.","'Mail' is defined but never used.","'Lock' is defined but never used.","'Route' is defined but never used.","'Switch' is defined but never used.","'Redirect' is defined but never used.","'password' is assigned a value but never used.","'Component' is defined but never used.","no-global-assign","no-unsafe-negation"]